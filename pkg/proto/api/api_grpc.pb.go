// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: api/api.proto

package api

import (
	context "context"
	core "github.com/fbsobreira/gotron-sdk/pkg/proto/core"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Wallet_GetAccount_FullMethodName                                   = "/protocol.Wallet/GetAccount"
	Wallet_GetAccountById_FullMethodName                               = "/protocol.Wallet/GetAccountById"
	Wallet_GetAccountBalance_FullMethodName                            = "/protocol.Wallet/GetAccountBalance"
	Wallet_GetBlockBalanceTrace_FullMethodName                         = "/protocol.Wallet/GetBlockBalanceTrace"
	Wallet_CreateTransaction_FullMethodName                            = "/protocol.Wallet/CreateTransaction"
	Wallet_CreateTransaction2_FullMethodName                           = "/protocol.Wallet/CreateTransaction2"
	Wallet_BroadcastTransaction_FullMethodName                         = "/protocol.Wallet/BroadcastTransaction"
	Wallet_UpdateAccount_FullMethodName                                = "/protocol.Wallet/UpdateAccount"
	Wallet_SetAccountId_FullMethodName                                 = "/protocol.Wallet/SetAccountId"
	Wallet_UpdateAccount2_FullMethodName                               = "/protocol.Wallet/UpdateAccount2"
	Wallet_VoteWitnessAccount_FullMethodName                           = "/protocol.Wallet/VoteWitnessAccount"
	Wallet_UpdateSetting_FullMethodName                                = "/protocol.Wallet/UpdateSetting"
	Wallet_UpdateEnergyLimit_FullMethodName                            = "/protocol.Wallet/UpdateEnergyLimit"
	Wallet_VoteWitnessAccount2_FullMethodName                          = "/protocol.Wallet/VoteWitnessAccount2"
	Wallet_CreateAssetIssue_FullMethodName                             = "/protocol.Wallet/CreateAssetIssue"
	Wallet_CreateAssetIssue2_FullMethodName                            = "/protocol.Wallet/CreateAssetIssue2"
	Wallet_UpdateWitness_FullMethodName                                = "/protocol.Wallet/UpdateWitness"
	Wallet_UpdateWitness2_FullMethodName                               = "/protocol.Wallet/UpdateWitness2"
	Wallet_CreateAccount_FullMethodName                                = "/protocol.Wallet/CreateAccount"
	Wallet_CreateAccount2_FullMethodName                               = "/protocol.Wallet/CreateAccount2"
	Wallet_CreateWitness_FullMethodName                                = "/protocol.Wallet/CreateWitness"
	Wallet_CreateWitness2_FullMethodName                               = "/protocol.Wallet/CreateWitness2"
	Wallet_TransferAsset_FullMethodName                                = "/protocol.Wallet/TransferAsset"
	Wallet_TransferAsset2_FullMethodName                               = "/protocol.Wallet/TransferAsset2"
	Wallet_ParticipateAssetIssue_FullMethodName                        = "/protocol.Wallet/ParticipateAssetIssue"
	Wallet_ParticipateAssetIssue2_FullMethodName                       = "/protocol.Wallet/ParticipateAssetIssue2"
	Wallet_FreezeBalance_FullMethodName                                = "/protocol.Wallet/FreezeBalance"
	Wallet_FreezeBalance2_FullMethodName                               = "/protocol.Wallet/FreezeBalance2"
	Wallet_FreezeBalanceV2_FullMethodName                              = "/protocol.Wallet/FreezeBalanceV2"
	Wallet_UnfreezeBalance_FullMethodName                              = "/protocol.Wallet/UnfreezeBalance"
	Wallet_UnfreezeBalance2_FullMethodName                             = "/protocol.Wallet/UnfreezeBalance2"
	Wallet_UnfreezeBalanceV2_FullMethodName                            = "/protocol.Wallet/UnfreezeBalanceV2"
	Wallet_UnfreezeAsset_FullMethodName                                = "/protocol.Wallet/UnfreezeAsset"
	Wallet_UnfreezeAsset2_FullMethodName                               = "/protocol.Wallet/UnfreezeAsset2"
	Wallet_WithdrawBalance_FullMethodName                              = "/protocol.Wallet/WithdrawBalance"
	Wallet_WithdrawBalance2_FullMethodName                             = "/protocol.Wallet/WithdrawBalance2"
	Wallet_WithdrawExpireUnfreeze_FullMethodName                       = "/protocol.Wallet/WithdrawExpireUnfreeze"
	Wallet_DelegateResource_FullMethodName                             = "/protocol.Wallet/DelegateResource"
	Wallet_UnDelegateResource_FullMethodName                           = "/protocol.Wallet/UnDelegateResource"
	Wallet_CancelAllUnfreezeV2_FullMethodName                          = "/protocol.Wallet/CancelAllUnfreezeV2"
	Wallet_UpdateAsset_FullMethodName                                  = "/protocol.Wallet/UpdateAsset"
	Wallet_UpdateAsset2_FullMethodName                                 = "/protocol.Wallet/UpdateAsset2"
	Wallet_ProposalCreate_FullMethodName                               = "/protocol.Wallet/ProposalCreate"
	Wallet_ProposalApprove_FullMethodName                              = "/protocol.Wallet/ProposalApprove"
	Wallet_ProposalDelete_FullMethodName                               = "/protocol.Wallet/ProposalDelete"
	Wallet_BuyStorage_FullMethodName                                   = "/protocol.Wallet/BuyStorage"
	Wallet_BuyStorageBytes_FullMethodName                              = "/protocol.Wallet/BuyStorageBytes"
	Wallet_SellStorage_FullMethodName                                  = "/protocol.Wallet/SellStorage"
	Wallet_ExchangeCreate_FullMethodName                               = "/protocol.Wallet/ExchangeCreate"
	Wallet_ExchangeInject_FullMethodName                               = "/protocol.Wallet/ExchangeInject"
	Wallet_ExchangeWithdraw_FullMethodName                             = "/protocol.Wallet/ExchangeWithdraw"
	Wallet_ExchangeTransaction_FullMethodName                          = "/protocol.Wallet/ExchangeTransaction"
	Wallet_MarketSellAsset_FullMethodName                              = "/protocol.Wallet/MarketSellAsset"
	Wallet_MarketCancelOrder_FullMethodName                            = "/protocol.Wallet/MarketCancelOrder"
	Wallet_GetMarketOrderById_FullMethodName                           = "/protocol.Wallet/GetMarketOrderById"
	Wallet_GetMarketOrderByAccount_FullMethodName                      = "/protocol.Wallet/GetMarketOrderByAccount"
	Wallet_GetMarketPriceByPair_FullMethodName                         = "/protocol.Wallet/GetMarketPriceByPair"
	Wallet_GetMarketOrderListByPair_FullMethodName                     = "/protocol.Wallet/GetMarketOrderListByPair"
	Wallet_GetMarketPairList_FullMethodName                            = "/protocol.Wallet/GetMarketPairList"
	Wallet_ListNodes_FullMethodName                                    = "/protocol.Wallet/ListNodes"
	Wallet_GetAssetIssueByAccount_FullMethodName                       = "/protocol.Wallet/GetAssetIssueByAccount"
	Wallet_GetAccountNet_FullMethodName                                = "/protocol.Wallet/GetAccountNet"
	Wallet_GetAccountResource_FullMethodName                           = "/protocol.Wallet/GetAccountResource"
	Wallet_GetAssetIssueByName_FullMethodName                          = "/protocol.Wallet/GetAssetIssueByName"
	Wallet_GetAssetIssueListByName_FullMethodName                      = "/protocol.Wallet/GetAssetIssueListByName"
	Wallet_GetAssetIssueById_FullMethodName                            = "/protocol.Wallet/GetAssetIssueById"
	Wallet_GetNowBlock_FullMethodName                                  = "/protocol.Wallet/GetNowBlock"
	Wallet_GetNowBlock2_FullMethodName                                 = "/protocol.Wallet/GetNowBlock2"
	Wallet_GetBlockByNum_FullMethodName                                = "/protocol.Wallet/GetBlockByNum"
	Wallet_GetBlockByNum2_FullMethodName                               = "/protocol.Wallet/GetBlockByNum2"
	Wallet_GetTransactionCountByBlockNum_FullMethodName                = "/protocol.Wallet/GetTransactionCountByBlockNum"
	Wallet_GetBlockById_FullMethodName                                 = "/protocol.Wallet/GetBlockById"
	Wallet_GetBlockByLimitNext_FullMethodName                          = "/protocol.Wallet/GetBlockByLimitNext"
	Wallet_GetBlockByLimitNext2_FullMethodName                         = "/protocol.Wallet/GetBlockByLimitNext2"
	Wallet_GetBlockByLatestNum_FullMethodName                          = "/protocol.Wallet/GetBlockByLatestNum"
	Wallet_GetBlockByLatestNum2_FullMethodName                         = "/protocol.Wallet/GetBlockByLatestNum2"
	Wallet_GetTransactionById_FullMethodName                           = "/protocol.Wallet/GetTransactionById"
	Wallet_DeployContract_FullMethodName                               = "/protocol.Wallet/DeployContract"
	Wallet_GetContract_FullMethodName                                  = "/protocol.Wallet/GetContract"
	Wallet_GetContractInfo_FullMethodName                              = "/protocol.Wallet/GetContractInfo"
	Wallet_TriggerContract_FullMethodName                              = "/protocol.Wallet/TriggerContract"
	Wallet_TriggerConstantContract_FullMethodName                      = "/protocol.Wallet/TriggerConstantContract"
	Wallet_EstimateEnergy_FullMethodName                               = "/protocol.Wallet/EstimateEnergy"
	Wallet_ClearContractABI_FullMethodName                             = "/protocol.Wallet/ClearContractABI"
	Wallet_ListWitnesses_FullMethodName                                = "/protocol.Wallet/ListWitnesses"
	Wallet_GetDelegatedResource_FullMethodName                         = "/protocol.Wallet/GetDelegatedResource"
	Wallet_GetDelegatedResourceV2_FullMethodName                       = "/protocol.Wallet/GetDelegatedResourceV2"
	Wallet_GetDelegatedResourceAccountIndex_FullMethodName             = "/protocol.Wallet/GetDelegatedResourceAccountIndex"
	Wallet_GetDelegatedResourceAccountIndexV2_FullMethodName           = "/protocol.Wallet/GetDelegatedResourceAccountIndexV2"
	Wallet_GetCanDelegatedMaxSize_FullMethodName                       = "/protocol.Wallet/GetCanDelegatedMaxSize"
	Wallet_GetAvailableUnfreezeCount_FullMethodName                    = "/protocol.Wallet/GetAvailableUnfreezeCount"
	Wallet_GetCanWithdrawUnfreezeAmount_FullMethodName                 = "/protocol.Wallet/GetCanWithdrawUnfreezeAmount"
	Wallet_ListProposals_FullMethodName                                = "/protocol.Wallet/ListProposals"
	Wallet_GetPaginatedProposalList_FullMethodName                     = "/protocol.Wallet/GetPaginatedProposalList"
	Wallet_GetProposalById_FullMethodName                              = "/protocol.Wallet/GetProposalById"
	Wallet_ListExchanges_FullMethodName                                = "/protocol.Wallet/ListExchanges"
	Wallet_GetPaginatedExchangeList_FullMethodName                     = "/protocol.Wallet/GetPaginatedExchangeList"
	Wallet_GetExchangeById_FullMethodName                              = "/protocol.Wallet/GetExchangeById"
	Wallet_GetChainParameters_FullMethodName                           = "/protocol.Wallet/GetChainParameters"
	Wallet_GetAssetIssueList_FullMethodName                            = "/protocol.Wallet/GetAssetIssueList"
	Wallet_GetPaginatedAssetIssueList_FullMethodName                   = "/protocol.Wallet/GetPaginatedAssetIssueList"
	Wallet_TotalTransaction_FullMethodName                             = "/protocol.Wallet/TotalTransaction"
	Wallet_GetNextMaintenanceTime_FullMethodName                       = "/protocol.Wallet/GetNextMaintenanceTime"
	Wallet_GetTransactionInfoById_FullMethodName                       = "/protocol.Wallet/GetTransactionInfoById"
	Wallet_AccountPermissionUpdate_FullMethodName                      = "/protocol.Wallet/AccountPermissionUpdate"
	Wallet_GetTransactionSignWeight_FullMethodName                     = "/protocol.Wallet/GetTransactionSignWeight"
	Wallet_GetTransactionApprovedList_FullMethodName                   = "/protocol.Wallet/GetTransactionApprovedList"
	Wallet_GetNodeInfo_FullMethodName                                  = "/protocol.Wallet/GetNodeInfo"
	Wallet_GetRewardInfo_FullMethodName                                = "/protocol.Wallet/GetRewardInfo"
	Wallet_GetBrokerageInfo_FullMethodName                             = "/protocol.Wallet/GetBrokerageInfo"
	Wallet_UpdateBrokerage_FullMethodName                              = "/protocol.Wallet/UpdateBrokerage"
	Wallet_CreateShieldedTransaction_FullMethodName                    = "/protocol.Wallet/CreateShieldedTransaction"
	Wallet_GetMerkleTreeVoucherInfo_FullMethodName                     = "/protocol.Wallet/GetMerkleTreeVoucherInfo"
	Wallet_ScanNoteByIvk_FullMethodName                                = "/protocol.Wallet/ScanNoteByIvk"
	Wallet_ScanAndMarkNoteByIvk_FullMethodName                         = "/protocol.Wallet/ScanAndMarkNoteByIvk"
	Wallet_ScanNoteByOvk_FullMethodName                                = "/protocol.Wallet/ScanNoteByOvk"
	Wallet_GetSpendingKey_FullMethodName                               = "/protocol.Wallet/GetSpendingKey"
	Wallet_GetExpandedSpendingKey_FullMethodName                       = "/protocol.Wallet/GetExpandedSpendingKey"
	Wallet_GetAkFromAsk_FullMethodName                                 = "/protocol.Wallet/GetAkFromAsk"
	Wallet_GetNkFromNsk_FullMethodName                                 = "/protocol.Wallet/GetNkFromNsk"
	Wallet_GetIncomingViewingKey_FullMethodName                        = "/protocol.Wallet/GetIncomingViewingKey"
	Wallet_GetDiversifier_FullMethodName                               = "/protocol.Wallet/GetDiversifier"
	Wallet_GetNewShieldedAddress_FullMethodName                        = "/protocol.Wallet/GetNewShieldedAddress"
	Wallet_GetZenPaymentAddress_FullMethodName                         = "/protocol.Wallet/GetZenPaymentAddress"
	Wallet_GetRcm_FullMethodName                                       = "/protocol.Wallet/GetRcm"
	Wallet_IsSpend_FullMethodName                                      = "/protocol.Wallet/IsSpend"
	Wallet_CreateShieldedTransactionWithoutSpendAuthSig_FullMethodName = "/protocol.Wallet/CreateShieldedTransactionWithoutSpendAuthSig"
	Wallet_GetShieldTransactionHash_FullMethodName                     = "/protocol.Wallet/GetShieldTransactionHash"
	Wallet_CreateSpendAuthSig_FullMethodName                           = "/protocol.Wallet/CreateSpendAuthSig"
	Wallet_CreateShieldNullifier_FullMethodName                        = "/protocol.Wallet/CreateShieldNullifier"
	Wallet_CreateShieldedContractParameters_FullMethodName             = "/protocol.Wallet/CreateShieldedContractParameters"
	Wallet_CreateShieldedContractParametersWithoutAsk_FullMethodName   = "/protocol.Wallet/CreateShieldedContractParametersWithoutAsk"
	Wallet_ScanShieldedTRC20NotesByIvk_FullMethodName                  = "/protocol.Wallet/ScanShieldedTRC20NotesByIvk"
	Wallet_ScanShieldedTRC20NotesByOvk_FullMethodName                  = "/protocol.Wallet/ScanShieldedTRC20NotesByOvk"
	Wallet_IsShieldedTRC20ContractNoteSpent_FullMethodName             = "/protocol.Wallet/IsShieldedTRC20ContractNoteSpent"
	Wallet_GetTriggerInputForShieldedTRC20Contract_FullMethodName      = "/protocol.Wallet/GetTriggerInputForShieldedTRC20Contract"
	Wallet_CreateCommonTransaction_FullMethodName                      = "/protocol.Wallet/CreateCommonTransaction"
	Wallet_GetTransactionInfoByBlockNum_FullMethodName                 = "/protocol.Wallet/GetTransactionInfoByBlockNum"
	Wallet_GetBurnTrx_FullMethodName                                   = "/protocol.Wallet/GetBurnTrx"
	Wallet_GetTransactionFromPending_FullMethodName                    = "/protocol.Wallet/GetTransactionFromPending"
	Wallet_GetTransactionListFromPending_FullMethodName                = "/protocol.Wallet/GetTransactionListFromPending"
	Wallet_GetPendingSize_FullMethodName                               = "/protocol.Wallet/GetPendingSize"
	Wallet_GetBlock_FullMethodName                                     = "/protocol.Wallet/GetBlock"
	Wallet_GetBandwidthPrices_FullMethodName                           = "/protocol.Wallet/GetBandwidthPrices"
	Wallet_GetEnergyPrices_FullMethodName                              = "/protocol.Wallet/GetEnergyPrices"
	Wallet_GetMemoFee_FullMethodName                                   = "/protocol.Wallet/GetMemoFee"
)

// WalletClient is the client API for Wallet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletClient interface {
	GetAccount(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*core.Account, error)
	GetAccountById(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*core.Account, error)
	GetAccountBalance(ctx context.Context, in *core.AccountBalanceRequest, opts ...grpc.CallOption) (*core.AccountBalanceResponse, error)
	GetBlockBalanceTrace(ctx context.Context, in *core.BlockBalanceTrace_BlockIdentifier, opts ...grpc.CallOption) (*core.BlockBalanceTrace, error)
	// Please use CreateTransaction2 instead of this function.
	CreateTransaction(ctx context.Context, in *core.TransferContract, opts ...grpc.CallOption) (*core.Transaction, error)
	// Use this function instead of CreateTransaction.
	CreateTransaction2(ctx context.Context, in *core.TransferContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	BroadcastTransaction(ctx context.Context, in *core.Transaction, opts ...grpc.CallOption) (*Return, error)
	// Please use UpdateAccount2 instead of this function.
	UpdateAccount(ctx context.Context, in *core.AccountUpdateContract, opts ...grpc.CallOption) (*core.Transaction, error)
	SetAccountId(ctx context.Context, in *core.SetAccountIdContract, opts ...grpc.CallOption) (*core.Transaction, error)
	// Use this function instead of UpdateAccount.
	UpdateAccount2(ctx context.Context, in *core.AccountUpdateContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	// Please use VoteWitnessAccount2 instead of this function.
	VoteWitnessAccount(ctx context.Context, in *core.VoteWitnessContract, opts ...grpc.CallOption) (*core.Transaction, error)
	// modify the consume_user_resource_percent
	UpdateSetting(ctx context.Context, in *core.UpdateSettingContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	// modify the energy_limit
	UpdateEnergyLimit(ctx context.Context, in *core.UpdateEnergyLimitContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	// Use this function instead of VoteWitnessAccount.
	VoteWitnessAccount2(ctx context.Context, in *core.VoteWitnessContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	// Please use CreateAssetIssue2 instead of this function.
	CreateAssetIssue(ctx context.Context, in *core.AssetIssueContract, opts ...grpc.CallOption) (*core.Transaction, error)
	// Use this function instead of CreateAssetIssue.
	CreateAssetIssue2(ctx context.Context, in *core.AssetIssueContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	// Please use UpdateWitness2 instead of this function.
	UpdateWitness(ctx context.Context, in *core.WitnessUpdateContract, opts ...grpc.CallOption) (*core.Transaction, error)
	// Use this function instead of UpdateWitness.
	UpdateWitness2(ctx context.Context, in *core.WitnessUpdateContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	// Please use CreateAccount2 instead of this function.
	CreateAccount(ctx context.Context, in *core.AccountCreateContract, opts ...grpc.CallOption) (*core.Transaction, error)
	// Use this function instead of CreateAccount.
	CreateAccount2(ctx context.Context, in *core.AccountCreateContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	// Please use CreateWitness2 instead of this function.
	CreateWitness(ctx context.Context, in *core.WitnessCreateContract, opts ...grpc.CallOption) (*core.Transaction, error)
	// Use this function instead of CreateWitness.
	CreateWitness2(ctx context.Context, in *core.WitnessCreateContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	// Please use TransferAsset2 instead of this function.
	TransferAsset(ctx context.Context, in *core.TransferAssetContract, opts ...grpc.CallOption) (*core.Transaction, error)
	// Use this function instead of TransferAsset.
	TransferAsset2(ctx context.Context, in *core.TransferAssetContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	// Please use ParticipateAssetIssue2 instead of this function.
	ParticipateAssetIssue(ctx context.Context, in *core.ParticipateAssetIssueContract, opts ...grpc.CallOption) (*core.Transaction, error)
	// Use this function instead of ParticipateAssetIssue.
	ParticipateAssetIssue2(ctx context.Context, in *core.ParticipateAssetIssueContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	// Please use FreezeBalance2 instead of this function.
	FreezeBalance(ctx context.Context, in *core.FreezeBalanceContract, opts ...grpc.CallOption) (*core.Transaction, error)
	// Use this function instead of FreezeBalance.
	FreezeBalance2(ctx context.Context, in *core.FreezeBalanceContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	// Use this function when FreezeBalanceV2.
	FreezeBalanceV2(ctx context.Context, in *core.FreezeBalanceV2Contract, opts ...grpc.CallOption) (*TransactionExtention, error)
	// Please use UnfreezeBalance2 instead of this function.
	UnfreezeBalance(ctx context.Context, in *core.UnfreezeBalanceContract, opts ...grpc.CallOption) (*core.Transaction, error)
	// Use this function instead of UnfreezeBalance.
	UnfreezeBalance2(ctx context.Context, in *core.UnfreezeBalanceContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	// Use this function when UnfreezeBalanceV2.
	UnfreezeBalanceV2(ctx context.Context, in *core.UnfreezeBalanceV2Contract, opts ...grpc.CallOption) (*TransactionExtention, error)
	// Please use UnfreezeAsset2 instead of this function.
	UnfreezeAsset(ctx context.Context, in *core.UnfreezeAssetContract, opts ...grpc.CallOption) (*core.Transaction, error)
	// Use this function instead of UnfreezeAsset.
	UnfreezeAsset2(ctx context.Context, in *core.UnfreezeAssetContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	// Please use WithdrawBalance2 instead of this function.
	WithdrawBalance(ctx context.Context, in *core.WithdrawBalanceContract, opts ...grpc.CallOption) (*core.Transaction, error)
	// Use this function instead of WithdrawBalance.
	WithdrawBalance2(ctx context.Context, in *core.WithdrawBalanceContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	WithdrawExpireUnfreeze(ctx context.Context, in *core.WithdrawExpireUnfreezeContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	DelegateResource(ctx context.Context, in *core.DelegateResourceContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	UnDelegateResource(ctx context.Context, in *core.UnDelegateResourceContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	CancelAllUnfreezeV2(ctx context.Context, in *core.CancelAllUnfreezeV2Contract, opts ...grpc.CallOption) (*TransactionExtention, error)
	// Please use UpdateAsset2 instead of this function.
	UpdateAsset(ctx context.Context, in *core.UpdateAssetContract, opts ...grpc.CallOption) (*core.Transaction, error)
	// Use this function instead of UpdateAsset.
	UpdateAsset2(ctx context.Context, in *core.UpdateAssetContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	ProposalCreate(ctx context.Context, in *core.ProposalCreateContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	ProposalApprove(ctx context.Context, in *core.ProposalApproveContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	ProposalDelete(ctx context.Context, in *core.ProposalDeleteContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	BuyStorage(ctx context.Context, in *core.BuyStorageContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	BuyStorageBytes(ctx context.Context, in *core.BuyStorageBytesContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	SellStorage(ctx context.Context, in *core.SellStorageContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	ExchangeCreate(ctx context.Context, in *core.ExchangeCreateContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	ExchangeInject(ctx context.Context, in *core.ExchangeInjectContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	ExchangeWithdraw(ctx context.Context, in *core.ExchangeWithdrawContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	ExchangeTransaction(ctx context.Context, in *core.ExchangeTransactionContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	MarketSellAsset(ctx context.Context, in *core.MarketSellAssetContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	MarketCancelOrder(ctx context.Context, in *core.MarketCancelOrderContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	GetMarketOrderById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.MarketOrder, error)
	GetMarketOrderByAccount(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.MarketOrderList, error)
	GetMarketPriceByPair(ctx context.Context, in *core.MarketOrderPair, opts ...grpc.CallOption) (*core.MarketPriceList, error)
	GetMarketOrderListByPair(ctx context.Context, in *core.MarketOrderPair, opts ...grpc.CallOption) (*core.MarketOrderList, error)
	GetMarketPairList(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.MarketOrderPairList, error)
	ListNodes(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NodeList, error)
	GetAssetIssueByAccount(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*AssetIssueList, error)
	GetAccountNet(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*AccountNetMessage, error)
	GetAccountResource(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*AccountResourceMessage, error)
	GetAssetIssueByName(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.AssetIssueContract, error)
	GetAssetIssueListByName(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*AssetIssueList, error)
	GetAssetIssueById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.AssetIssueContract, error)
	// Please use GetNowBlock2 instead of this function.
	GetNowBlock(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.Block, error)
	// Use this function instead of GetNowBlock.
	GetNowBlock2(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*BlockExtention, error)
	// Please use GetBlockByNum2 instead of this function.
	GetBlockByNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*core.Block, error)
	// Use this function instead of GetBlockByNum.
	GetBlockByNum2(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*BlockExtention, error)
	GetTransactionCountByBlockNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*NumberMessage, error)
	GetBlockById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Block, error)
	// Please use GetBlockByLimitNext2 instead of this function.
	GetBlockByLimitNext(ctx context.Context, in *BlockLimit, opts ...grpc.CallOption) (*BlockList, error)
	// Use this function instead of GetBlockByLimitNext.
	GetBlockByLimitNext2(ctx context.Context, in *BlockLimit, opts ...grpc.CallOption) (*BlockListExtention, error)
	// Please use GetBlockByLatestNum2 instead of this function.
	GetBlockByLatestNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*BlockList, error)
	// Use this function instead of GetBlockByLatestNum.
	GetBlockByLatestNum2(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*BlockListExtention, error)
	GetTransactionById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Transaction, error)
	DeployContract(ctx context.Context, in *core.CreateSmartContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	GetContract(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.SmartContract, error)
	GetContractInfo(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.SmartContractDataWrapper, error)
	TriggerContract(ctx context.Context, in *core.TriggerSmartContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	TriggerConstantContract(ctx context.Context, in *core.TriggerSmartContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	EstimateEnergy(ctx context.Context, in *core.TriggerSmartContract, opts ...grpc.CallOption) (*EstimateEnergyMessage, error)
	ClearContractABI(ctx context.Context, in *core.ClearABIContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	ListWitnesses(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*WitnessList, error)
	GetDelegatedResource(ctx context.Context, in *DelegatedResourceMessage, opts ...grpc.CallOption) (*DelegatedResourceList, error)
	GetDelegatedResourceV2(ctx context.Context, in *DelegatedResourceMessage, opts ...grpc.CallOption) (*DelegatedResourceList, error)
	GetDelegatedResourceAccountIndex(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.DelegatedResourceAccountIndex, error)
	GetDelegatedResourceAccountIndexV2(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.DelegatedResourceAccountIndex, error)
	GetCanDelegatedMaxSize(ctx context.Context, in *CanDelegatedMaxSizeRequestMessage, opts ...grpc.CallOption) (*CanDelegatedMaxSizeResponseMessage, error)
	GetAvailableUnfreezeCount(ctx context.Context, in *GetAvailableUnfreezeCountRequestMessage, opts ...grpc.CallOption) (*GetAvailableUnfreezeCountResponseMessage, error)
	GetCanWithdrawUnfreezeAmount(ctx context.Context, in *CanWithdrawUnfreezeAmountRequestMessage, opts ...grpc.CallOption) (*CanWithdrawUnfreezeAmountResponseMessage, error)
	ListProposals(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*ProposalList, error)
	GetPaginatedProposalList(ctx context.Context, in *PaginatedMessage, opts ...grpc.CallOption) (*ProposalList, error)
	GetProposalById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Proposal, error)
	ListExchanges(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*ExchangeList, error)
	GetPaginatedExchangeList(ctx context.Context, in *PaginatedMessage, opts ...grpc.CallOption) (*ExchangeList, error)
	GetExchangeById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Exchange, error)
	GetChainParameters(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.ChainParameters, error)
	GetAssetIssueList(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AssetIssueList, error)
	GetPaginatedAssetIssueList(ctx context.Context, in *PaginatedMessage, opts ...grpc.CallOption) (*AssetIssueList, error)
	TotalTransaction(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NumberMessage, error)
	GetNextMaintenanceTime(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NumberMessage, error)
	GetTransactionInfoById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.TransactionInfo, error)
	AccountPermissionUpdate(ctx context.Context, in *core.AccountPermissionUpdateContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	GetTransactionSignWeight(ctx context.Context, in *core.Transaction, opts ...grpc.CallOption) (*TransactionSignWeight, error)
	GetTransactionApprovedList(ctx context.Context, in *core.Transaction, opts ...grpc.CallOption) (*TransactionApprovedList, error)
	GetNodeInfo(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.NodeInfo, error)
	GetRewardInfo(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*NumberMessage, error)
	GetBrokerageInfo(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*NumberMessage, error)
	UpdateBrokerage(ctx context.Context, in *core.UpdateBrokerageContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	// for shiededTransaction
	CreateShieldedTransaction(ctx context.Context, in *PrivateParameters, opts ...grpc.CallOption) (*TransactionExtention, error)
	GetMerkleTreeVoucherInfo(ctx context.Context, in *core.OutputPointInfo, opts ...grpc.CallOption) (*core.IncrementalMerkleVoucherInfo, error)
	ScanNoteByIvk(ctx context.Context, in *IvkDecryptParameters, opts ...grpc.CallOption) (*DecryptNotes, error)
	ScanAndMarkNoteByIvk(ctx context.Context, in *IvkDecryptAndMarkParameters, opts ...grpc.CallOption) (*DecryptNotesMarked, error)
	ScanNoteByOvk(ctx context.Context, in *OvkDecryptParameters, opts ...grpc.CallOption) (*DecryptNotes, error)
	GetSpendingKey(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*BytesMessage, error)
	GetExpandedSpendingKey(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*ExpandedSpendingKeyMessage, error)
	GetAkFromAsk(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*BytesMessage, error)
	GetNkFromNsk(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*BytesMessage, error)
	GetIncomingViewingKey(ctx context.Context, in *ViewingKeyMessage, opts ...grpc.CallOption) (*IncomingViewingKeyMessage, error)
	GetDiversifier(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*DiversifierMessage, error)
	GetNewShieldedAddress(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*ShieldedAddressInfo, error)
	GetZenPaymentAddress(ctx context.Context, in *IncomingViewingKeyDiversifierMessage, opts ...grpc.CallOption) (*PaymentAddressMessage, error)
	GetRcm(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*BytesMessage, error)
	IsSpend(ctx context.Context, in *NoteParameters, opts ...grpc.CallOption) (*SpendResult, error)
	CreateShieldedTransactionWithoutSpendAuthSig(ctx context.Context, in *PrivateParametersWithoutAsk, opts ...grpc.CallOption) (*TransactionExtention, error)
	GetShieldTransactionHash(ctx context.Context, in *core.Transaction, opts ...grpc.CallOption) (*BytesMessage, error)
	CreateSpendAuthSig(ctx context.Context, in *SpendAuthSigParameters, opts ...grpc.CallOption) (*BytesMessage, error)
	CreateShieldNullifier(ctx context.Context, in *NfParameters, opts ...grpc.CallOption) (*BytesMessage, error)
	// for shielded contract
	CreateShieldedContractParameters(ctx context.Context, in *PrivateShieldedTRC20Parameters, opts ...grpc.CallOption) (*ShieldedTRC20Parameters, error)
	CreateShieldedContractParametersWithoutAsk(ctx context.Context, in *PrivateShieldedTRC20ParametersWithoutAsk, opts ...grpc.CallOption) (*ShieldedTRC20Parameters, error)
	ScanShieldedTRC20NotesByIvk(ctx context.Context, in *IvkDecryptTRC20Parameters, opts ...grpc.CallOption) (*DecryptNotesTRC20, error)
	ScanShieldedTRC20NotesByOvk(ctx context.Context, in *OvkDecryptTRC20Parameters, opts ...grpc.CallOption) (*DecryptNotesTRC20, error)
	IsShieldedTRC20ContractNoteSpent(ctx context.Context, in *NfTRC20Parameters, opts ...grpc.CallOption) (*NullifierResult, error)
	GetTriggerInputForShieldedTRC20Contract(ctx context.Context, in *ShieldedTRC20TriggerContractParameters, opts ...grpc.CallOption) (*BytesMessage, error)
	CreateCommonTransaction(ctx context.Context, in *core.Transaction, opts ...grpc.CallOption) (*TransactionExtention, error)
	GetTransactionInfoByBlockNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*TransactionInfoList, error)
	GetBurnTrx(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NumberMessage, error)
	GetTransactionFromPending(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Transaction, error)
	GetTransactionListFromPending(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*TransactionIdList, error)
	GetPendingSize(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NumberMessage, error)
	GetBlock(ctx context.Context, in *BlockReq, opts ...grpc.CallOption) (*BlockExtention, error)
	GetBandwidthPrices(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*PricesResponseMessage, error)
	GetEnergyPrices(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*PricesResponseMessage, error)
	GetMemoFee(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*PricesResponseMessage, error)
}

type walletClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletClient(cc grpc.ClientConnInterface) WalletClient {
	return &walletClient{cc}
}

func (c *walletClient) GetAccount(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*core.Account, error) {
	out := new(core.Account)
	err := c.cc.Invoke(ctx, Wallet_GetAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAccountById(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*core.Account, error) {
	out := new(core.Account)
	err := c.cc.Invoke(ctx, Wallet_GetAccountById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAccountBalance(ctx context.Context, in *core.AccountBalanceRequest, opts ...grpc.CallOption) (*core.AccountBalanceResponse, error) {
	out := new(core.AccountBalanceResponse)
	err := c.cc.Invoke(ctx, Wallet_GetAccountBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBlockBalanceTrace(ctx context.Context, in *core.BlockBalanceTrace_BlockIdentifier, opts ...grpc.CallOption) (*core.BlockBalanceTrace, error) {
	out := new(core.BlockBalanceTrace)
	err := c.cc.Invoke(ctx, Wallet_GetBlockBalanceTrace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateTransaction(ctx context.Context, in *core.TransferContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, Wallet_CreateTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateTransaction2(ctx context.Context, in *core.TransferContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_CreateTransaction2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) BroadcastTransaction(ctx context.Context, in *core.Transaction, opts ...grpc.CallOption) (*Return, error) {
	out := new(Return)
	err := c.cc.Invoke(ctx, Wallet_BroadcastTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateAccount(ctx context.Context, in *core.AccountUpdateContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, Wallet_UpdateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) SetAccountId(ctx context.Context, in *core.SetAccountIdContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, Wallet_SetAccountId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateAccount2(ctx context.Context, in *core.AccountUpdateContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_UpdateAccount2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) VoteWitnessAccount(ctx context.Context, in *core.VoteWitnessContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, Wallet_VoteWitnessAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateSetting(ctx context.Context, in *core.UpdateSettingContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_UpdateSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateEnergyLimit(ctx context.Context, in *core.UpdateEnergyLimitContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_UpdateEnergyLimit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) VoteWitnessAccount2(ctx context.Context, in *core.VoteWitnessContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_VoteWitnessAccount2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateAssetIssue(ctx context.Context, in *core.AssetIssueContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, Wallet_CreateAssetIssue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateAssetIssue2(ctx context.Context, in *core.AssetIssueContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_CreateAssetIssue2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateWitness(ctx context.Context, in *core.WitnessUpdateContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, Wallet_UpdateWitness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateWitness2(ctx context.Context, in *core.WitnessUpdateContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_UpdateWitness2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateAccount(ctx context.Context, in *core.AccountCreateContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, Wallet_CreateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateAccount2(ctx context.Context, in *core.AccountCreateContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_CreateAccount2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateWitness(ctx context.Context, in *core.WitnessCreateContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, Wallet_CreateWitness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateWitness2(ctx context.Context, in *core.WitnessCreateContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_CreateWitness2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) TransferAsset(ctx context.Context, in *core.TransferAssetContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, Wallet_TransferAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) TransferAsset2(ctx context.Context, in *core.TransferAssetContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_TransferAsset2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ParticipateAssetIssue(ctx context.Context, in *core.ParticipateAssetIssueContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, Wallet_ParticipateAssetIssue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ParticipateAssetIssue2(ctx context.Context, in *core.ParticipateAssetIssueContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_ParticipateAssetIssue2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) FreezeBalance(ctx context.Context, in *core.FreezeBalanceContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, Wallet_FreezeBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) FreezeBalance2(ctx context.Context, in *core.FreezeBalanceContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_FreezeBalance2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) FreezeBalanceV2(ctx context.Context, in *core.FreezeBalanceV2Contract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_FreezeBalanceV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UnfreezeBalance(ctx context.Context, in *core.UnfreezeBalanceContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, Wallet_UnfreezeBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UnfreezeBalance2(ctx context.Context, in *core.UnfreezeBalanceContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_UnfreezeBalance2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UnfreezeBalanceV2(ctx context.Context, in *core.UnfreezeBalanceV2Contract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_UnfreezeBalanceV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UnfreezeAsset(ctx context.Context, in *core.UnfreezeAssetContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, Wallet_UnfreezeAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UnfreezeAsset2(ctx context.Context, in *core.UnfreezeAssetContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_UnfreezeAsset2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) WithdrawBalance(ctx context.Context, in *core.WithdrawBalanceContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, Wallet_WithdrawBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) WithdrawBalance2(ctx context.Context, in *core.WithdrawBalanceContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_WithdrawBalance2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) WithdrawExpireUnfreeze(ctx context.Context, in *core.WithdrawExpireUnfreezeContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_WithdrawExpireUnfreeze_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) DelegateResource(ctx context.Context, in *core.DelegateResourceContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_DelegateResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UnDelegateResource(ctx context.Context, in *core.UnDelegateResourceContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_UnDelegateResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CancelAllUnfreezeV2(ctx context.Context, in *core.CancelAllUnfreezeV2Contract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_CancelAllUnfreezeV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateAsset(ctx context.Context, in *core.UpdateAssetContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, Wallet_UpdateAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateAsset2(ctx context.Context, in *core.UpdateAssetContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_UpdateAsset2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ProposalCreate(ctx context.Context, in *core.ProposalCreateContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_ProposalCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ProposalApprove(ctx context.Context, in *core.ProposalApproveContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_ProposalApprove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ProposalDelete(ctx context.Context, in *core.ProposalDeleteContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_ProposalDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) BuyStorage(ctx context.Context, in *core.BuyStorageContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_BuyStorage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) BuyStorageBytes(ctx context.Context, in *core.BuyStorageBytesContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_BuyStorageBytes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) SellStorage(ctx context.Context, in *core.SellStorageContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_SellStorage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ExchangeCreate(ctx context.Context, in *core.ExchangeCreateContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_ExchangeCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ExchangeInject(ctx context.Context, in *core.ExchangeInjectContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_ExchangeInject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ExchangeWithdraw(ctx context.Context, in *core.ExchangeWithdrawContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_ExchangeWithdraw_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ExchangeTransaction(ctx context.Context, in *core.ExchangeTransactionContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_ExchangeTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) MarketSellAsset(ctx context.Context, in *core.MarketSellAssetContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_MarketSellAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) MarketCancelOrder(ctx context.Context, in *core.MarketCancelOrderContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_MarketCancelOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetMarketOrderById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.MarketOrder, error) {
	out := new(core.MarketOrder)
	err := c.cc.Invoke(ctx, Wallet_GetMarketOrderById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetMarketOrderByAccount(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.MarketOrderList, error) {
	out := new(core.MarketOrderList)
	err := c.cc.Invoke(ctx, Wallet_GetMarketOrderByAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetMarketPriceByPair(ctx context.Context, in *core.MarketOrderPair, opts ...grpc.CallOption) (*core.MarketPriceList, error) {
	out := new(core.MarketPriceList)
	err := c.cc.Invoke(ctx, Wallet_GetMarketPriceByPair_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetMarketOrderListByPair(ctx context.Context, in *core.MarketOrderPair, opts ...grpc.CallOption) (*core.MarketOrderList, error) {
	out := new(core.MarketOrderList)
	err := c.cc.Invoke(ctx, Wallet_GetMarketOrderListByPair_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetMarketPairList(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.MarketOrderPairList, error) {
	out := new(core.MarketOrderPairList)
	err := c.cc.Invoke(ctx, Wallet_GetMarketPairList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListNodes(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NodeList, error) {
	out := new(NodeList)
	err := c.cc.Invoke(ctx, Wallet_ListNodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAssetIssueByAccount(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*AssetIssueList, error) {
	out := new(AssetIssueList)
	err := c.cc.Invoke(ctx, Wallet_GetAssetIssueByAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAccountNet(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*AccountNetMessage, error) {
	out := new(AccountNetMessage)
	err := c.cc.Invoke(ctx, Wallet_GetAccountNet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAccountResource(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*AccountResourceMessage, error) {
	out := new(AccountResourceMessage)
	err := c.cc.Invoke(ctx, Wallet_GetAccountResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAssetIssueByName(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.AssetIssueContract, error) {
	out := new(core.AssetIssueContract)
	err := c.cc.Invoke(ctx, Wallet_GetAssetIssueByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAssetIssueListByName(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*AssetIssueList, error) {
	out := new(AssetIssueList)
	err := c.cc.Invoke(ctx, Wallet_GetAssetIssueListByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAssetIssueById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.AssetIssueContract, error) {
	out := new(core.AssetIssueContract)
	err := c.cc.Invoke(ctx, Wallet_GetAssetIssueById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetNowBlock(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.Block, error) {
	out := new(core.Block)
	err := c.cc.Invoke(ctx, Wallet_GetNowBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetNowBlock2(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*BlockExtention, error) {
	out := new(BlockExtention)
	err := c.cc.Invoke(ctx, Wallet_GetNowBlock2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBlockByNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*core.Block, error) {
	out := new(core.Block)
	err := c.cc.Invoke(ctx, Wallet_GetBlockByNum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBlockByNum2(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*BlockExtention, error) {
	out := new(BlockExtention)
	err := c.cc.Invoke(ctx, Wallet_GetBlockByNum2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetTransactionCountByBlockNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*NumberMessage, error) {
	out := new(NumberMessage)
	err := c.cc.Invoke(ctx, Wallet_GetTransactionCountByBlockNum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBlockById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Block, error) {
	out := new(core.Block)
	err := c.cc.Invoke(ctx, Wallet_GetBlockById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBlockByLimitNext(ctx context.Context, in *BlockLimit, opts ...grpc.CallOption) (*BlockList, error) {
	out := new(BlockList)
	err := c.cc.Invoke(ctx, Wallet_GetBlockByLimitNext_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBlockByLimitNext2(ctx context.Context, in *BlockLimit, opts ...grpc.CallOption) (*BlockListExtention, error) {
	out := new(BlockListExtention)
	err := c.cc.Invoke(ctx, Wallet_GetBlockByLimitNext2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBlockByLatestNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*BlockList, error) {
	out := new(BlockList)
	err := c.cc.Invoke(ctx, Wallet_GetBlockByLatestNum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBlockByLatestNum2(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*BlockListExtention, error) {
	out := new(BlockListExtention)
	err := c.cc.Invoke(ctx, Wallet_GetBlockByLatestNum2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetTransactionById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, Wallet_GetTransactionById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) DeployContract(ctx context.Context, in *core.CreateSmartContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_DeployContract_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetContract(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.SmartContract, error) {
	out := new(core.SmartContract)
	err := c.cc.Invoke(ctx, Wallet_GetContract_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetContractInfo(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.SmartContractDataWrapper, error) {
	out := new(core.SmartContractDataWrapper)
	err := c.cc.Invoke(ctx, Wallet_GetContractInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) TriggerContract(ctx context.Context, in *core.TriggerSmartContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_TriggerContract_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) TriggerConstantContract(ctx context.Context, in *core.TriggerSmartContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_TriggerConstantContract_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) EstimateEnergy(ctx context.Context, in *core.TriggerSmartContract, opts ...grpc.CallOption) (*EstimateEnergyMessage, error) {
	out := new(EstimateEnergyMessage)
	err := c.cc.Invoke(ctx, Wallet_EstimateEnergy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ClearContractABI(ctx context.Context, in *core.ClearABIContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_ClearContractABI_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListWitnesses(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*WitnessList, error) {
	out := new(WitnessList)
	err := c.cc.Invoke(ctx, Wallet_ListWitnesses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetDelegatedResource(ctx context.Context, in *DelegatedResourceMessage, opts ...grpc.CallOption) (*DelegatedResourceList, error) {
	out := new(DelegatedResourceList)
	err := c.cc.Invoke(ctx, Wallet_GetDelegatedResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetDelegatedResourceV2(ctx context.Context, in *DelegatedResourceMessage, opts ...grpc.CallOption) (*DelegatedResourceList, error) {
	out := new(DelegatedResourceList)
	err := c.cc.Invoke(ctx, Wallet_GetDelegatedResourceV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetDelegatedResourceAccountIndex(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.DelegatedResourceAccountIndex, error) {
	out := new(core.DelegatedResourceAccountIndex)
	err := c.cc.Invoke(ctx, Wallet_GetDelegatedResourceAccountIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetDelegatedResourceAccountIndexV2(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.DelegatedResourceAccountIndex, error) {
	out := new(core.DelegatedResourceAccountIndex)
	err := c.cc.Invoke(ctx, Wallet_GetDelegatedResourceAccountIndexV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetCanDelegatedMaxSize(ctx context.Context, in *CanDelegatedMaxSizeRequestMessage, opts ...grpc.CallOption) (*CanDelegatedMaxSizeResponseMessage, error) {
	out := new(CanDelegatedMaxSizeResponseMessage)
	err := c.cc.Invoke(ctx, Wallet_GetCanDelegatedMaxSize_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAvailableUnfreezeCount(ctx context.Context, in *GetAvailableUnfreezeCountRequestMessage, opts ...grpc.CallOption) (*GetAvailableUnfreezeCountResponseMessage, error) {
	out := new(GetAvailableUnfreezeCountResponseMessage)
	err := c.cc.Invoke(ctx, Wallet_GetAvailableUnfreezeCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetCanWithdrawUnfreezeAmount(ctx context.Context, in *CanWithdrawUnfreezeAmountRequestMessage, opts ...grpc.CallOption) (*CanWithdrawUnfreezeAmountResponseMessage, error) {
	out := new(CanWithdrawUnfreezeAmountResponseMessage)
	err := c.cc.Invoke(ctx, Wallet_GetCanWithdrawUnfreezeAmount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListProposals(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*ProposalList, error) {
	out := new(ProposalList)
	err := c.cc.Invoke(ctx, Wallet_ListProposals_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetPaginatedProposalList(ctx context.Context, in *PaginatedMessage, opts ...grpc.CallOption) (*ProposalList, error) {
	out := new(ProposalList)
	err := c.cc.Invoke(ctx, Wallet_GetPaginatedProposalList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetProposalById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Proposal, error) {
	out := new(core.Proposal)
	err := c.cc.Invoke(ctx, Wallet_GetProposalById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListExchanges(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*ExchangeList, error) {
	out := new(ExchangeList)
	err := c.cc.Invoke(ctx, Wallet_ListExchanges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetPaginatedExchangeList(ctx context.Context, in *PaginatedMessage, opts ...grpc.CallOption) (*ExchangeList, error) {
	out := new(ExchangeList)
	err := c.cc.Invoke(ctx, Wallet_GetPaginatedExchangeList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetExchangeById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Exchange, error) {
	out := new(core.Exchange)
	err := c.cc.Invoke(ctx, Wallet_GetExchangeById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetChainParameters(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.ChainParameters, error) {
	out := new(core.ChainParameters)
	err := c.cc.Invoke(ctx, Wallet_GetChainParameters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAssetIssueList(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AssetIssueList, error) {
	out := new(AssetIssueList)
	err := c.cc.Invoke(ctx, Wallet_GetAssetIssueList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetPaginatedAssetIssueList(ctx context.Context, in *PaginatedMessage, opts ...grpc.CallOption) (*AssetIssueList, error) {
	out := new(AssetIssueList)
	err := c.cc.Invoke(ctx, Wallet_GetPaginatedAssetIssueList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) TotalTransaction(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NumberMessage, error) {
	out := new(NumberMessage)
	err := c.cc.Invoke(ctx, Wallet_TotalTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetNextMaintenanceTime(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NumberMessage, error) {
	out := new(NumberMessage)
	err := c.cc.Invoke(ctx, Wallet_GetNextMaintenanceTime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetTransactionInfoById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.TransactionInfo, error) {
	out := new(core.TransactionInfo)
	err := c.cc.Invoke(ctx, Wallet_GetTransactionInfoById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) AccountPermissionUpdate(ctx context.Context, in *core.AccountPermissionUpdateContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_AccountPermissionUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetTransactionSignWeight(ctx context.Context, in *core.Transaction, opts ...grpc.CallOption) (*TransactionSignWeight, error) {
	out := new(TransactionSignWeight)
	err := c.cc.Invoke(ctx, Wallet_GetTransactionSignWeight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetTransactionApprovedList(ctx context.Context, in *core.Transaction, opts ...grpc.CallOption) (*TransactionApprovedList, error) {
	out := new(TransactionApprovedList)
	err := c.cc.Invoke(ctx, Wallet_GetTransactionApprovedList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetNodeInfo(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.NodeInfo, error) {
	out := new(core.NodeInfo)
	err := c.cc.Invoke(ctx, Wallet_GetNodeInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetRewardInfo(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*NumberMessage, error) {
	out := new(NumberMessage)
	err := c.cc.Invoke(ctx, Wallet_GetRewardInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBrokerageInfo(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*NumberMessage, error) {
	out := new(NumberMessage)
	err := c.cc.Invoke(ctx, Wallet_GetBrokerageInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateBrokerage(ctx context.Context, in *core.UpdateBrokerageContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_UpdateBrokerage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateShieldedTransaction(ctx context.Context, in *PrivateParameters, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_CreateShieldedTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetMerkleTreeVoucherInfo(ctx context.Context, in *core.OutputPointInfo, opts ...grpc.CallOption) (*core.IncrementalMerkleVoucherInfo, error) {
	out := new(core.IncrementalMerkleVoucherInfo)
	err := c.cc.Invoke(ctx, Wallet_GetMerkleTreeVoucherInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ScanNoteByIvk(ctx context.Context, in *IvkDecryptParameters, opts ...grpc.CallOption) (*DecryptNotes, error) {
	out := new(DecryptNotes)
	err := c.cc.Invoke(ctx, Wallet_ScanNoteByIvk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ScanAndMarkNoteByIvk(ctx context.Context, in *IvkDecryptAndMarkParameters, opts ...grpc.CallOption) (*DecryptNotesMarked, error) {
	out := new(DecryptNotesMarked)
	err := c.cc.Invoke(ctx, Wallet_ScanAndMarkNoteByIvk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ScanNoteByOvk(ctx context.Context, in *OvkDecryptParameters, opts ...grpc.CallOption) (*DecryptNotes, error) {
	out := new(DecryptNotes)
	err := c.cc.Invoke(ctx, Wallet_ScanNoteByOvk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetSpendingKey(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*BytesMessage, error) {
	out := new(BytesMessage)
	err := c.cc.Invoke(ctx, Wallet_GetSpendingKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetExpandedSpendingKey(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*ExpandedSpendingKeyMessage, error) {
	out := new(ExpandedSpendingKeyMessage)
	err := c.cc.Invoke(ctx, Wallet_GetExpandedSpendingKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAkFromAsk(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*BytesMessage, error) {
	out := new(BytesMessage)
	err := c.cc.Invoke(ctx, Wallet_GetAkFromAsk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetNkFromNsk(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*BytesMessage, error) {
	out := new(BytesMessage)
	err := c.cc.Invoke(ctx, Wallet_GetNkFromNsk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetIncomingViewingKey(ctx context.Context, in *ViewingKeyMessage, opts ...grpc.CallOption) (*IncomingViewingKeyMessage, error) {
	out := new(IncomingViewingKeyMessage)
	err := c.cc.Invoke(ctx, Wallet_GetIncomingViewingKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetDiversifier(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*DiversifierMessage, error) {
	out := new(DiversifierMessage)
	err := c.cc.Invoke(ctx, Wallet_GetDiversifier_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetNewShieldedAddress(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*ShieldedAddressInfo, error) {
	out := new(ShieldedAddressInfo)
	err := c.cc.Invoke(ctx, Wallet_GetNewShieldedAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetZenPaymentAddress(ctx context.Context, in *IncomingViewingKeyDiversifierMessage, opts ...grpc.CallOption) (*PaymentAddressMessage, error) {
	out := new(PaymentAddressMessage)
	err := c.cc.Invoke(ctx, Wallet_GetZenPaymentAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetRcm(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*BytesMessage, error) {
	out := new(BytesMessage)
	err := c.cc.Invoke(ctx, Wallet_GetRcm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) IsSpend(ctx context.Context, in *NoteParameters, opts ...grpc.CallOption) (*SpendResult, error) {
	out := new(SpendResult)
	err := c.cc.Invoke(ctx, Wallet_IsSpend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateShieldedTransactionWithoutSpendAuthSig(ctx context.Context, in *PrivateParametersWithoutAsk, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_CreateShieldedTransactionWithoutSpendAuthSig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetShieldTransactionHash(ctx context.Context, in *core.Transaction, opts ...grpc.CallOption) (*BytesMessage, error) {
	out := new(BytesMessage)
	err := c.cc.Invoke(ctx, Wallet_GetShieldTransactionHash_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateSpendAuthSig(ctx context.Context, in *SpendAuthSigParameters, opts ...grpc.CallOption) (*BytesMessage, error) {
	out := new(BytesMessage)
	err := c.cc.Invoke(ctx, Wallet_CreateSpendAuthSig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateShieldNullifier(ctx context.Context, in *NfParameters, opts ...grpc.CallOption) (*BytesMessage, error) {
	out := new(BytesMessage)
	err := c.cc.Invoke(ctx, Wallet_CreateShieldNullifier_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateShieldedContractParameters(ctx context.Context, in *PrivateShieldedTRC20Parameters, opts ...grpc.CallOption) (*ShieldedTRC20Parameters, error) {
	out := new(ShieldedTRC20Parameters)
	err := c.cc.Invoke(ctx, Wallet_CreateShieldedContractParameters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateShieldedContractParametersWithoutAsk(ctx context.Context, in *PrivateShieldedTRC20ParametersWithoutAsk, opts ...grpc.CallOption) (*ShieldedTRC20Parameters, error) {
	out := new(ShieldedTRC20Parameters)
	err := c.cc.Invoke(ctx, Wallet_CreateShieldedContractParametersWithoutAsk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ScanShieldedTRC20NotesByIvk(ctx context.Context, in *IvkDecryptTRC20Parameters, opts ...grpc.CallOption) (*DecryptNotesTRC20, error) {
	out := new(DecryptNotesTRC20)
	err := c.cc.Invoke(ctx, Wallet_ScanShieldedTRC20NotesByIvk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ScanShieldedTRC20NotesByOvk(ctx context.Context, in *OvkDecryptTRC20Parameters, opts ...grpc.CallOption) (*DecryptNotesTRC20, error) {
	out := new(DecryptNotesTRC20)
	err := c.cc.Invoke(ctx, Wallet_ScanShieldedTRC20NotesByOvk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) IsShieldedTRC20ContractNoteSpent(ctx context.Context, in *NfTRC20Parameters, opts ...grpc.CallOption) (*NullifierResult, error) {
	out := new(NullifierResult)
	err := c.cc.Invoke(ctx, Wallet_IsShieldedTRC20ContractNoteSpent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetTriggerInputForShieldedTRC20Contract(ctx context.Context, in *ShieldedTRC20TriggerContractParameters, opts ...grpc.CallOption) (*BytesMessage, error) {
	out := new(BytesMessage)
	err := c.cc.Invoke(ctx, Wallet_GetTriggerInputForShieldedTRC20Contract_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateCommonTransaction(ctx context.Context, in *core.Transaction, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, Wallet_CreateCommonTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetTransactionInfoByBlockNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*TransactionInfoList, error) {
	out := new(TransactionInfoList)
	err := c.cc.Invoke(ctx, Wallet_GetTransactionInfoByBlockNum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBurnTrx(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NumberMessage, error) {
	out := new(NumberMessage)
	err := c.cc.Invoke(ctx, Wallet_GetBurnTrx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetTransactionFromPending(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, Wallet_GetTransactionFromPending_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetTransactionListFromPending(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*TransactionIdList, error) {
	out := new(TransactionIdList)
	err := c.cc.Invoke(ctx, Wallet_GetTransactionListFromPending_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetPendingSize(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NumberMessage, error) {
	out := new(NumberMessage)
	err := c.cc.Invoke(ctx, Wallet_GetPendingSize_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBlock(ctx context.Context, in *BlockReq, opts ...grpc.CallOption) (*BlockExtention, error) {
	out := new(BlockExtention)
	err := c.cc.Invoke(ctx, Wallet_GetBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBandwidthPrices(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*PricesResponseMessage, error) {
	out := new(PricesResponseMessage)
	err := c.cc.Invoke(ctx, Wallet_GetBandwidthPrices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetEnergyPrices(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*PricesResponseMessage, error) {
	out := new(PricesResponseMessage)
	err := c.cc.Invoke(ctx, Wallet_GetEnergyPrices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetMemoFee(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*PricesResponseMessage, error) {
	out := new(PricesResponseMessage)
	err := c.cc.Invoke(ctx, Wallet_GetMemoFee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServer is the server API for Wallet service.
// All implementations must embed UnimplementedWalletServer
// for forward compatibility
type WalletServer interface {
	GetAccount(context.Context, *core.Account) (*core.Account, error)
	GetAccountById(context.Context, *core.Account) (*core.Account, error)
	GetAccountBalance(context.Context, *core.AccountBalanceRequest) (*core.AccountBalanceResponse, error)
	GetBlockBalanceTrace(context.Context, *core.BlockBalanceTrace_BlockIdentifier) (*core.BlockBalanceTrace, error)
	// Please use CreateTransaction2 instead of this function.
	CreateTransaction(context.Context, *core.TransferContract) (*core.Transaction, error)
	// Use this function instead of CreateTransaction.
	CreateTransaction2(context.Context, *core.TransferContract) (*TransactionExtention, error)
	BroadcastTransaction(context.Context, *core.Transaction) (*Return, error)
	// Please use UpdateAccount2 instead of this function.
	UpdateAccount(context.Context, *core.AccountUpdateContract) (*core.Transaction, error)
	SetAccountId(context.Context, *core.SetAccountIdContract) (*core.Transaction, error)
	// Use this function instead of UpdateAccount.
	UpdateAccount2(context.Context, *core.AccountUpdateContract) (*TransactionExtention, error)
	// Please use VoteWitnessAccount2 instead of this function.
	VoteWitnessAccount(context.Context, *core.VoteWitnessContract) (*core.Transaction, error)
	// modify the consume_user_resource_percent
	UpdateSetting(context.Context, *core.UpdateSettingContract) (*TransactionExtention, error)
	// modify the energy_limit
	UpdateEnergyLimit(context.Context, *core.UpdateEnergyLimitContract) (*TransactionExtention, error)
	// Use this function instead of VoteWitnessAccount.
	VoteWitnessAccount2(context.Context, *core.VoteWitnessContract) (*TransactionExtention, error)
	// Please use CreateAssetIssue2 instead of this function.
	CreateAssetIssue(context.Context, *core.AssetIssueContract) (*core.Transaction, error)
	// Use this function instead of CreateAssetIssue.
	CreateAssetIssue2(context.Context, *core.AssetIssueContract) (*TransactionExtention, error)
	// Please use UpdateWitness2 instead of this function.
	UpdateWitness(context.Context, *core.WitnessUpdateContract) (*core.Transaction, error)
	// Use this function instead of UpdateWitness.
	UpdateWitness2(context.Context, *core.WitnessUpdateContract) (*TransactionExtention, error)
	// Please use CreateAccount2 instead of this function.
	CreateAccount(context.Context, *core.AccountCreateContract) (*core.Transaction, error)
	// Use this function instead of CreateAccount.
	CreateAccount2(context.Context, *core.AccountCreateContract) (*TransactionExtention, error)
	// Please use CreateWitness2 instead of this function.
	CreateWitness(context.Context, *core.WitnessCreateContract) (*core.Transaction, error)
	// Use this function instead of CreateWitness.
	CreateWitness2(context.Context, *core.WitnessCreateContract) (*TransactionExtention, error)
	// Please use TransferAsset2 instead of this function.
	TransferAsset(context.Context, *core.TransferAssetContract) (*core.Transaction, error)
	// Use this function instead of TransferAsset.
	TransferAsset2(context.Context, *core.TransferAssetContract) (*TransactionExtention, error)
	// Please use ParticipateAssetIssue2 instead of this function.
	ParticipateAssetIssue(context.Context, *core.ParticipateAssetIssueContract) (*core.Transaction, error)
	// Use this function instead of ParticipateAssetIssue.
	ParticipateAssetIssue2(context.Context, *core.ParticipateAssetIssueContract) (*TransactionExtention, error)
	// Please use FreezeBalance2 instead of this function.
	FreezeBalance(context.Context, *core.FreezeBalanceContract) (*core.Transaction, error)
	// Use this function instead of FreezeBalance.
	FreezeBalance2(context.Context, *core.FreezeBalanceContract) (*TransactionExtention, error)
	// Use this function when FreezeBalanceV2.
	FreezeBalanceV2(context.Context, *core.FreezeBalanceV2Contract) (*TransactionExtention, error)
	// Please use UnfreezeBalance2 instead of this function.
	UnfreezeBalance(context.Context, *core.UnfreezeBalanceContract) (*core.Transaction, error)
	// Use this function instead of UnfreezeBalance.
	UnfreezeBalance2(context.Context, *core.UnfreezeBalanceContract) (*TransactionExtention, error)
	// Use this function when UnfreezeBalanceV2.
	UnfreezeBalanceV2(context.Context, *core.UnfreezeBalanceV2Contract) (*TransactionExtention, error)
	// Please use UnfreezeAsset2 instead of this function.
	UnfreezeAsset(context.Context, *core.UnfreezeAssetContract) (*core.Transaction, error)
	// Use this function instead of UnfreezeAsset.
	UnfreezeAsset2(context.Context, *core.UnfreezeAssetContract) (*TransactionExtention, error)
	// Please use WithdrawBalance2 instead of this function.
	WithdrawBalance(context.Context, *core.WithdrawBalanceContract) (*core.Transaction, error)
	// Use this function instead of WithdrawBalance.
	WithdrawBalance2(context.Context, *core.WithdrawBalanceContract) (*TransactionExtention, error)
	WithdrawExpireUnfreeze(context.Context, *core.WithdrawExpireUnfreezeContract) (*TransactionExtention, error)
	DelegateResource(context.Context, *core.DelegateResourceContract) (*TransactionExtention, error)
	UnDelegateResource(context.Context, *core.UnDelegateResourceContract) (*TransactionExtention, error)
	CancelAllUnfreezeV2(context.Context, *core.CancelAllUnfreezeV2Contract) (*TransactionExtention, error)
	// Please use UpdateAsset2 instead of this function.
	UpdateAsset(context.Context, *core.UpdateAssetContract) (*core.Transaction, error)
	// Use this function instead of UpdateAsset.
	UpdateAsset2(context.Context, *core.UpdateAssetContract) (*TransactionExtention, error)
	ProposalCreate(context.Context, *core.ProposalCreateContract) (*TransactionExtention, error)
	ProposalApprove(context.Context, *core.ProposalApproveContract) (*TransactionExtention, error)
	ProposalDelete(context.Context, *core.ProposalDeleteContract) (*TransactionExtention, error)
	BuyStorage(context.Context, *core.BuyStorageContract) (*TransactionExtention, error)
	BuyStorageBytes(context.Context, *core.BuyStorageBytesContract) (*TransactionExtention, error)
	SellStorage(context.Context, *core.SellStorageContract) (*TransactionExtention, error)
	ExchangeCreate(context.Context, *core.ExchangeCreateContract) (*TransactionExtention, error)
	ExchangeInject(context.Context, *core.ExchangeInjectContract) (*TransactionExtention, error)
	ExchangeWithdraw(context.Context, *core.ExchangeWithdrawContract) (*TransactionExtention, error)
	ExchangeTransaction(context.Context, *core.ExchangeTransactionContract) (*TransactionExtention, error)
	MarketSellAsset(context.Context, *core.MarketSellAssetContract) (*TransactionExtention, error)
	MarketCancelOrder(context.Context, *core.MarketCancelOrderContract) (*TransactionExtention, error)
	GetMarketOrderById(context.Context, *BytesMessage) (*core.MarketOrder, error)
	GetMarketOrderByAccount(context.Context, *BytesMessage) (*core.MarketOrderList, error)
	GetMarketPriceByPair(context.Context, *core.MarketOrderPair) (*core.MarketPriceList, error)
	GetMarketOrderListByPair(context.Context, *core.MarketOrderPair) (*core.MarketOrderList, error)
	GetMarketPairList(context.Context, *EmptyMessage) (*core.MarketOrderPairList, error)
	ListNodes(context.Context, *EmptyMessage) (*NodeList, error)
	GetAssetIssueByAccount(context.Context, *core.Account) (*AssetIssueList, error)
	GetAccountNet(context.Context, *core.Account) (*AccountNetMessage, error)
	GetAccountResource(context.Context, *core.Account) (*AccountResourceMessage, error)
	GetAssetIssueByName(context.Context, *BytesMessage) (*core.AssetIssueContract, error)
	GetAssetIssueListByName(context.Context, *BytesMessage) (*AssetIssueList, error)
	GetAssetIssueById(context.Context, *BytesMessage) (*core.AssetIssueContract, error)
	// Please use GetNowBlock2 instead of this function.
	GetNowBlock(context.Context, *EmptyMessage) (*core.Block, error)
	// Use this function instead of GetNowBlock.
	GetNowBlock2(context.Context, *EmptyMessage) (*BlockExtention, error)
	// Please use GetBlockByNum2 instead of this function.
	GetBlockByNum(context.Context, *NumberMessage) (*core.Block, error)
	// Use this function instead of GetBlockByNum.
	GetBlockByNum2(context.Context, *NumberMessage) (*BlockExtention, error)
	GetTransactionCountByBlockNum(context.Context, *NumberMessage) (*NumberMessage, error)
	GetBlockById(context.Context, *BytesMessage) (*core.Block, error)
	// Please use GetBlockByLimitNext2 instead of this function.
	GetBlockByLimitNext(context.Context, *BlockLimit) (*BlockList, error)
	// Use this function instead of GetBlockByLimitNext.
	GetBlockByLimitNext2(context.Context, *BlockLimit) (*BlockListExtention, error)
	// Please use GetBlockByLatestNum2 instead of this function.
	GetBlockByLatestNum(context.Context, *NumberMessage) (*BlockList, error)
	// Use this function instead of GetBlockByLatestNum.
	GetBlockByLatestNum2(context.Context, *NumberMessage) (*BlockListExtention, error)
	GetTransactionById(context.Context, *BytesMessage) (*core.Transaction, error)
	DeployContract(context.Context, *core.CreateSmartContract) (*TransactionExtention, error)
	GetContract(context.Context, *BytesMessage) (*core.SmartContract, error)
	GetContractInfo(context.Context, *BytesMessage) (*core.SmartContractDataWrapper, error)
	TriggerContract(context.Context, *core.TriggerSmartContract) (*TransactionExtention, error)
	TriggerConstantContract(context.Context, *core.TriggerSmartContract) (*TransactionExtention, error)
	EstimateEnergy(context.Context, *core.TriggerSmartContract) (*EstimateEnergyMessage, error)
	ClearContractABI(context.Context, *core.ClearABIContract) (*TransactionExtention, error)
	ListWitnesses(context.Context, *EmptyMessage) (*WitnessList, error)
	GetDelegatedResource(context.Context, *DelegatedResourceMessage) (*DelegatedResourceList, error)
	GetDelegatedResourceV2(context.Context, *DelegatedResourceMessage) (*DelegatedResourceList, error)
	GetDelegatedResourceAccountIndex(context.Context, *BytesMessage) (*core.DelegatedResourceAccountIndex, error)
	GetDelegatedResourceAccountIndexV2(context.Context, *BytesMessage) (*core.DelegatedResourceAccountIndex, error)
	GetCanDelegatedMaxSize(context.Context, *CanDelegatedMaxSizeRequestMessage) (*CanDelegatedMaxSizeResponseMessage, error)
	GetAvailableUnfreezeCount(context.Context, *GetAvailableUnfreezeCountRequestMessage) (*GetAvailableUnfreezeCountResponseMessage, error)
	GetCanWithdrawUnfreezeAmount(context.Context, *CanWithdrawUnfreezeAmountRequestMessage) (*CanWithdrawUnfreezeAmountResponseMessage, error)
	ListProposals(context.Context, *EmptyMessage) (*ProposalList, error)
	GetPaginatedProposalList(context.Context, *PaginatedMessage) (*ProposalList, error)
	GetProposalById(context.Context, *BytesMessage) (*core.Proposal, error)
	ListExchanges(context.Context, *EmptyMessage) (*ExchangeList, error)
	GetPaginatedExchangeList(context.Context, *PaginatedMessage) (*ExchangeList, error)
	GetExchangeById(context.Context, *BytesMessage) (*core.Exchange, error)
	GetChainParameters(context.Context, *EmptyMessage) (*core.ChainParameters, error)
	GetAssetIssueList(context.Context, *EmptyMessage) (*AssetIssueList, error)
	GetPaginatedAssetIssueList(context.Context, *PaginatedMessage) (*AssetIssueList, error)
	TotalTransaction(context.Context, *EmptyMessage) (*NumberMessage, error)
	GetNextMaintenanceTime(context.Context, *EmptyMessage) (*NumberMessage, error)
	GetTransactionInfoById(context.Context, *BytesMessage) (*core.TransactionInfo, error)
	AccountPermissionUpdate(context.Context, *core.AccountPermissionUpdateContract) (*TransactionExtention, error)
	GetTransactionSignWeight(context.Context, *core.Transaction) (*TransactionSignWeight, error)
	GetTransactionApprovedList(context.Context, *core.Transaction) (*TransactionApprovedList, error)
	GetNodeInfo(context.Context, *EmptyMessage) (*core.NodeInfo, error)
	GetRewardInfo(context.Context, *BytesMessage) (*NumberMessage, error)
	GetBrokerageInfo(context.Context, *BytesMessage) (*NumberMessage, error)
	UpdateBrokerage(context.Context, *core.UpdateBrokerageContract) (*TransactionExtention, error)
	// for shiededTransaction
	CreateShieldedTransaction(context.Context, *PrivateParameters) (*TransactionExtention, error)
	GetMerkleTreeVoucherInfo(context.Context, *core.OutputPointInfo) (*core.IncrementalMerkleVoucherInfo, error)
	ScanNoteByIvk(context.Context, *IvkDecryptParameters) (*DecryptNotes, error)
	ScanAndMarkNoteByIvk(context.Context, *IvkDecryptAndMarkParameters) (*DecryptNotesMarked, error)
	ScanNoteByOvk(context.Context, *OvkDecryptParameters) (*DecryptNotes, error)
	GetSpendingKey(context.Context, *EmptyMessage) (*BytesMessage, error)
	GetExpandedSpendingKey(context.Context, *BytesMessage) (*ExpandedSpendingKeyMessage, error)
	GetAkFromAsk(context.Context, *BytesMessage) (*BytesMessage, error)
	GetNkFromNsk(context.Context, *BytesMessage) (*BytesMessage, error)
	GetIncomingViewingKey(context.Context, *ViewingKeyMessage) (*IncomingViewingKeyMessage, error)
	GetDiversifier(context.Context, *EmptyMessage) (*DiversifierMessage, error)
	GetNewShieldedAddress(context.Context, *EmptyMessage) (*ShieldedAddressInfo, error)
	GetZenPaymentAddress(context.Context, *IncomingViewingKeyDiversifierMessage) (*PaymentAddressMessage, error)
	GetRcm(context.Context, *EmptyMessage) (*BytesMessage, error)
	IsSpend(context.Context, *NoteParameters) (*SpendResult, error)
	CreateShieldedTransactionWithoutSpendAuthSig(context.Context, *PrivateParametersWithoutAsk) (*TransactionExtention, error)
	GetShieldTransactionHash(context.Context, *core.Transaction) (*BytesMessage, error)
	CreateSpendAuthSig(context.Context, *SpendAuthSigParameters) (*BytesMessage, error)
	CreateShieldNullifier(context.Context, *NfParameters) (*BytesMessage, error)
	// for shielded contract
	CreateShieldedContractParameters(context.Context, *PrivateShieldedTRC20Parameters) (*ShieldedTRC20Parameters, error)
	CreateShieldedContractParametersWithoutAsk(context.Context, *PrivateShieldedTRC20ParametersWithoutAsk) (*ShieldedTRC20Parameters, error)
	ScanShieldedTRC20NotesByIvk(context.Context, *IvkDecryptTRC20Parameters) (*DecryptNotesTRC20, error)
	ScanShieldedTRC20NotesByOvk(context.Context, *OvkDecryptTRC20Parameters) (*DecryptNotesTRC20, error)
	IsShieldedTRC20ContractNoteSpent(context.Context, *NfTRC20Parameters) (*NullifierResult, error)
	GetTriggerInputForShieldedTRC20Contract(context.Context, *ShieldedTRC20TriggerContractParameters) (*BytesMessage, error)
	CreateCommonTransaction(context.Context, *core.Transaction) (*TransactionExtention, error)
	GetTransactionInfoByBlockNum(context.Context, *NumberMessage) (*TransactionInfoList, error)
	GetBurnTrx(context.Context, *EmptyMessage) (*NumberMessage, error)
	GetTransactionFromPending(context.Context, *BytesMessage) (*core.Transaction, error)
	GetTransactionListFromPending(context.Context, *EmptyMessage) (*TransactionIdList, error)
	GetPendingSize(context.Context, *EmptyMessage) (*NumberMessage, error)
	GetBlock(context.Context, *BlockReq) (*BlockExtention, error)
	GetBandwidthPrices(context.Context, *EmptyMessage) (*PricesResponseMessage, error)
	GetEnergyPrices(context.Context, *EmptyMessage) (*PricesResponseMessage, error)
	GetMemoFee(context.Context, *EmptyMessage) (*PricesResponseMessage, error)
	mustEmbedUnimplementedWalletServer()
}

// UnimplementedWalletServer must be embedded to have forward compatible implementations.
type UnimplementedWalletServer struct {
}

func (UnimplementedWalletServer) GetAccount(context.Context, *core.Account) (*core.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedWalletServer) GetAccountById(context.Context, *core.Account) (*core.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountById not implemented")
}
func (UnimplementedWalletServer) GetAccountBalance(context.Context, *core.AccountBalanceRequest) (*core.AccountBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountBalance not implemented")
}
func (UnimplementedWalletServer) GetBlockBalanceTrace(context.Context, *core.BlockBalanceTrace_BlockIdentifier) (*core.BlockBalanceTrace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockBalanceTrace not implemented")
}
func (UnimplementedWalletServer) CreateTransaction(context.Context, *core.TransferContract) (*core.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedWalletServer) CreateTransaction2(context.Context, *core.TransferContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction2 not implemented")
}
func (UnimplementedWalletServer) BroadcastTransaction(context.Context, *core.Transaction) (*Return, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastTransaction not implemented")
}
func (UnimplementedWalletServer) UpdateAccount(context.Context, *core.AccountUpdateContract) (*core.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedWalletServer) SetAccountId(context.Context, *core.SetAccountIdContract) (*core.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAccountId not implemented")
}
func (UnimplementedWalletServer) UpdateAccount2(context.Context, *core.AccountUpdateContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount2 not implemented")
}
func (UnimplementedWalletServer) VoteWitnessAccount(context.Context, *core.VoteWitnessContract) (*core.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteWitnessAccount not implemented")
}
func (UnimplementedWalletServer) UpdateSetting(context.Context, *core.UpdateSettingContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSetting not implemented")
}
func (UnimplementedWalletServer) UpdateEnergyLimit(context.Context, *core.UpdateEnergyLimitContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnergyLimit not implemented")
}
func (UnimplementedWalletServer) VoteWitnessAccount2(context.Context, *core.VoteWitnessContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteWitnessAccount2 not implemented")
}
func (UnimplementedWalletServer) CreateAssetIssue(context.Context, *core.AssetIssueContract) (*core.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAssetIssue not implemented")
}
func (UnimplementedWalletServer) CreateAssetIssue2(context.Context, *core.AssetIssueContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAssetIssue2 not implemented")
}
func (UnimplementedWalletServer) UpdateWitness(context.Context, *core.WitnessUpdateContract) (*core.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWitness not implemented")
}
func (UnimplementedWalletServer) UpdateWitness2(context.Context, *core.WitnessUpdateContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWitness2 not implemented")
}
func (UnimplementedWalletServer) CreateAccount(context.Context, *core.AccountCreateContract) (*core.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedWalletServer) CreateAccount2(context.Context, *core.AccountCreateContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount2 not implemented")
}
func (UnimplementedWalletServer) CreateWitness(context.Context, *core.WitnessCreateContract) (*core.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWitness not implemented")
}
func (UnimplementedWalletServer) CreateWitness2(context.Context, *core.WitnessCreateContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWitness2 not implemented")
}
func (UnimplementedWalletServer) TransferAsset(context.Context, *core.TransferAssetContract) (*core.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferAsset not implemented")
}
func (UnimplementedWalletServer) TransferAsset2(context.Context, *core.TransferAssetContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferAsset2 not implemented")
}
func (UnimplementedWalletServer) ParticipateAssetIssue(context.Context, *core.ParticipateAssetIssueContract) (*core.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParticipateAssetIssue not implemented")
}
func (UnimplementedWalletServer) ParticipateAssetIssue2(context.Context, *core.ParticipateAssetIssueContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParticipateAssetIssue2 not implemented")
}
func (UnimplementedWalletServer) FreezeBalance(context.Context, *core.FreezeBalanceContract) (*core.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreezeBalance not implemented")
}
func (UnimplementedWalletServer) FreezeBalance2(context.Context, *core.FreezeBalanceContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreezeBalance2 not implemented")
}
func (UnimplementedWalletServer) FreezeBalanceV2(context.Context, *core.FreezeBalanceV2Contract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreezeBalanceV2 not implemented")
}
func (UnimplementedWalletServer) UnfreezeBalance(context.Context, *core.UnfreezeBalanceContract) (*core.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfreezeBalance not implemented")
}
func (UnimplementedWalletServer) UnfreezeBalance2(context.Context, *core.UnfreezeBalanceContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfreezeBalance2 not implemented")
}
func (UnimplementedWalletServer) UnfreezeBalanceV2(context.Context, *core.UnfreezeBalanceV2Contract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfreezeBalanceV2 not implemented")
}
func (UnimplementedWalletServer) UnfreezeAsset(context.Context, *core.UnfreezeAssetContract) (*core.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfreezeAsset not implemented")
}
func (UnimplementedWalletServer) UnfreezeAsset2(context.Context, *core.UnfreezeAssetContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfreezeAsset2 not implemented")
}
func (UnimplementedWalletServer) WithdrawBalance(context.Context, *core.WithdrawBalanceContract) (*core.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawBalance not implemented")
}
func (UnimplementedWalletServer) WithdrawBalance2(context.Context, *core.WithdrawBalanceContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawBalance2 not implemented")
}
func (UnimplementedWalletServer) WithdrawExpireUnfreeze(context.Context, *core.WithdrawExpireUnfreezeContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawExpireUnfreeze not implemented")
}
func (UnimplementedWalletServer) DelegateResource(context.Context, *core.DelegateResourceContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegateResource not implemented")
}
func (UnimplementedWalletServer) UnDelegateResource(context.Context, *core.UnDelegateResourceContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnDelegateResource not implemented")
}
func (UnimplementedWalletServer) CancelAllUnfreezeV2(context.Context, *core.CancelAllUnfreezeV2Contract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelAllUnfreezeV2 not implemented")
}
func (UnimplementedWalletServer) UpdateAsset(context.Context, *core.UpdateAssetContract) (*core.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAsset not implemented")
}
func (UnimplementedWalletServer) UpdateAsset2(context.Context, *core.UpdateAssetContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAsset2 not implemented")
}
func (UnimplementedWalletServer) ProposalCreate(context.Context, *core.ProposalCreateContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposalCreate not implemented")
}
func (UnimplementedWalletServer) ProposalApprove(context.Context, *core.ProposalApproveContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposalApprove not implemented")
}
func (UnimplementedWalletServer) ProposalDelete(context.Context, *core.ProposalDeleteContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposalDelete not implemented")
}
func (UnimplementedWalletServer) BuyStorage(context.Context, *core.BuyStorageContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyStorage not implemented")
}
func (UnimplementedWalletServer) BuyStorageBytes(context.Context, *core.BuyStorageBytesContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyStorageBytes not implemented")
}
func (UnimplementedWalletServer) SellStorage(context.Context, *core.SellStorageContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellStorage not implemented")
}
func (UnimplementedWalletServer) ExchangeCreate(context.Context, *core.ExchangeCreateContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeCreate not implemented")
}
func (UnimplementedWalletServer) ExchangeInject(context.Context, *core.ExchangeInjectContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeInject not implemented")
}
func (UnimplementedWalletServer) ExchangeWithdraw(context.Context, *core.ExchangeWithdrawContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeWithdraw not implemented")
}
func (UnimplementedWalletServer) ExchangeTransaction(context.Context, *core.ExchangeTransactionContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeTransaction not implemented")
}
func (UnimplementedWalletServer) MarketSellAsset(context.Context, *core.MarketSellAssetContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketSellAsset not implemented")
}
func (UnimplementedWalletServer) MarketCancelOrder(context.Context, *core.MarketCancelOrderContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketCancelOrder not implemented")
}
func (UnimplementedWalletServer) GetMarketOrderById(context.Context, *BytesMessage) (*core.MarketOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketOrderById not implemented")
}
func (UnimplementedWalletServer) GetMarketOrderByAccount(context.Context, *BytesMessage) (*core.MarketOrderList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketOrderByAccount not implemented")
}
func (UnimplementedWalletServer) GetMarketPriceByPair(context.Context, *core.MarketOrderPair) (*core.MarketPriceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketPriceByPair not implemented")
}
func (UnimplementedWalletServer) GetMarketOrderListByPair(context.Context, *core.MarketOrderPair) (*core.MarketOrderList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketOrderListByPair not implemented")
}
func (UnimplementedWalletServer) GetMarketPairList(context.Context, *EmptyMessage) (*core.MarketOrderPairList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketPairList not implemented")
}
func (UnimplementedWalletServer) ListNodes(context.Context, *EmptyMessage) (*NodeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (UnimplementedWalletServer) GetAssetIssueByAccount(context.Context, *core.Account) (*AssetIssueList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetIssueByAccount not implemented")
}
func (UnimplementedWalletServer) GetAccountNet(context.Context, *core.Account) (*AccountNetMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountNet not implemented")
}
func (UnimplementedWalletServer) GetAccountResource(context.Context, *core.Account) (*AccountResourceMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountResource not implemented")
}
func (UnimplementedWalletServer) GetAssetIssueByName(context.Context, *BytesMessage) (*core.AssetIssueContract, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetIssueByName not implemented")
}
func (UnimplementedWalletServer) GetAssetIssueListByName(context.Context, *BytesMessage) (*AssetIssueList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetIssueListByName not implemented")
}
func (UnimplementedWalletServer) GetAssetIssueById(context.Context, *BytesMessage) (*core.AssetIssueContract, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetIssueById not implemented")
}
func (UnimplementedWalletServer) GetNowBlock(context.Context, *EmptyMessage) (*core.Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNowBlock not implemented")
}
func (UnimplementedWalletServer) GetNowBlock2(context.Context, *EmptyMessage) (*BlockExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNowBlock2 not implemented")
}
func (UnimplementedWalletServer) GetBlockByNum(context.Context, *NumberMessage) (*core.Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByNum not implemented")
}
func (UnimplementedWalletServer) GetBlockByNum2(context.Context, *NumberMessage) (*BlockExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByNum2 not implemented")
}
func (UnimplementedWalletServer) GetTransactionCountByBlockNum(context.Context, *NumberMessage) (*NumberMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionCountByBlockNum not implemented")
}
func (UnimplementedWalletServer) GetBlockById(context.Context, *BytesMessage) (*core.Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockById not implemented")
}
func (UnimplementedWalletServer) GetBlockByLimitNext(context.Context, *BlockLimit) (*BlockList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByLimitNext not implemented")
}
func (UnimplementedWalletServer) GetBlockByLimitNext2(context.Context, *BlockLimit) (*BlockListExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByLimitNext2 not implemented")
}
func (UnimplementedWalletServer) GetBlockByLatestNum(context.Context, *NumberMessage) (*BlockList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByLatestNum not implemented")
}
func (UnimplementedWalletServer) GetBlockByLatestNum2(context.Context, *NumberMessage) (*BlockListExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByLatestNum2 not implemented")
}
func (UnimplementedWalletServer) GetTransactionById(context.Context, *BytesMessage) (*core.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionById not implemented")
}
func (UnimplementedWalletServer) DeployContract(context.Context, *core.CreateSmartContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployContract not implemented")
}
func (UnimplementedWalletServer) GetContract(context.Context, *BytesMessage) (*core.SmartContract, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContract not implemented")
}
func (UnimplementedWalletServer) GetContractInfo(context.Context, *BytesMessage) (*core.SmartContractDataWrapper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractInfo not implemented")
}
func (UnimplementedWalletServer) TriggerContract(context.Context, *core.TriggerSmartContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerContract not implemented")
}
func (UnimplementedWalletServer) TriggerConstantContract(context.Context, *core.TriggerSmartContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerConstantContract not implemented")
}
func (UnimplementedWalletServer) EstimateEnergy(context.Context, *core.TriggerSmartContract) (*EstimateEnergyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateEnergy not implemented")
}
func (UnimplementedWalletServer) ClearContractABI(context.Context, *core.ClearABIContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearContractABI not implemented")
}
func (UnimplementedWalletServer) ListWitnesses(context.Context, *EmptyMessage) (*WitnessList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWitnesses not implemented")
}
func (UnimplementedWalletServer) GetDelegatedResource(context.Context, *DelegatedResourceMessage) (*DelegatedResourceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegatedResource not implemented")
}
func (UnimplementedWalletServer) GetDelegatedResourceV2(context.Context, *DelegatedResourceMessage) (*DelegatedResourceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegatedResourceV2 not implemented")
}
func (UnimplementedWalletServer) GetDelegatedResourceAccountIndex(context.Context, *BytesMessage) (*core.DelegatedResourceAccountIndex, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegatedResourceAccountIndex not implemented")
}
func (UnimplementedWalletServer) GetDelegatedResourceAccountIndexV2(context.Context, *BytesMessage) (*core.DelegatedResourceAccountIndex, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegatedResourceAccountIndexV2 not implemented")
}
func (UnimplementedWalletServer) GetCanDelegatedMaxSize(context.Context, *CanDelegatedMaxSizeRequestMessage) (*CanDelegatedMaxSizeResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCanDelegatedMaxSize not implemented")
}
func (UnimplementedWalletServer) GetAvailableUnfreezeCount(context.Context, *GetAvailableUnfreezeCountRequestMessage) (*GetAvailableUnfreezeCountResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableUnfreezeCount not implemented")
}
func (UnimplementedWalletServer) GetCanWithdrawUnfreezeAmount(context.Context, *CanWithdrawUnfreezeAmountRequestMessage) (*CanWithdrawUnfreezeAmountResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCanWithdrawUnfreezeAmount not implemented")
}
func (UnimplementedWalletServer) ListProposals(context.Context, *EmptyMessage) (*ProposalList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProposals not implemented")
}
func (UnimplementedWalletServer) GetPaginatedProposalList(context.Context, *PaginatedMessage) (*ProposalList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaginatedProposalList not implemented")
}
func (UnimplementedWalletServer) GetProposalById(context.Context, *BytesMessage) (*core.Proposal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProposalById not implemented")
}
func (UnimplementedWalletServer) ListExchanges(context.Context, *EmptyMessage) (*ExchangeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExchanges not implemented")
}
func (UnimplementedWalletServer) GetPaginatedExchangeList(context.Context, *PaginatedMessage) (*ExchangeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaginatedExchangeList not implemented")
}
func (UnimplementedWalletServer) GetExchangeById(context.Context, *BytesMessage) (*core.Exchange, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExchangeById not implemented")
}
func (UnimplementedWalletServer) GetChainParameters(context.Context, *EmptyMessage) (*core.ChainParameters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainParameters not implemented")
}
func (UnimplementedWalletServer) GetAssetIssueList(context.Context, *EmptyMessage) (*AssetIssueList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetIssueList not implemented")
}
func (UnimplementedWalletServer) GetPaginatedAssetIssueList(context.Context, *PaginatedMessage) (*AssetIssueList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaginatedAssetIssueList not implemented")
}
func (UnimplementedWalletServer) TotalTransaction(context.Context, *EmptyMessage) (*NumberMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalTransaction not implemented")
}
func (UnimplementedWalletServer) GetNextMaintenanceTime(context.Context, *EmptyMessage) (*NumberMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextMaintenanceTime not implemented")
}
func (UnimplementedWalletServer) GetTransactionInfoById(context.Context, *BytesMessage) (*core.TransactionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionInfoById not implemented")
}
func (UnimplementedWalletServer) AccountPermissionUpdate(context.Context, *core.AccountPermissionUpdateContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountPermissionUpdate not implemented")
}
func (UnimplementedWalletServer) GetTransactionSignWeight(context.Context, *core.Transaction) (*TransactionSignWeight, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionSignWeight not implemented")
}
func (UnimplementedWalletServer) GetTransactionApprovedList(context.Context, *core.Transaction) (*TransactionApprovedList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionApprovedList not implemented")
}
func (UnimplementedWalletServer) GetNodeInfo(context.Context, *EmptyMessage) (*core.NodeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeInfo not implemented")
}
func (UnimplementedWalletServer) GetRewardInfo(context.Context, *BytesMessage) (*NumberMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRewardInfo not implemented")
}
func (UnimplementedWalletServer) GetBrokerageInfo(context.Context, *BytesMessage) (*NumberMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrokerageInfo not implemented")
}
func (UnimplementedWalletServer) UpdateBrokerage(context.Context, *core.UpdateBrokerageContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBrokerage not implemented")
}
func (UnimplementedWalletServer) CreateShieldedTransaction(context.Context, *PrivateParameters) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShieldedTransaction not implemented")
}
func (UnimplementedWalletServer) GetMerkleTreeVoucherInfo(context.Context, *core.OutputPointInfo) (*core.IncrementalMerkleVoucherInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerkleTreeVoucherInfo not implemented")
}
func (UnimplementedWalletServer) ScanNoteByIvk(context.Context, *IvkDecryptParameters) (*DecryptNotes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanNoteByIvk not implemented")
}
func (UnimplementedWalletServer) ScanAndMarkNoteByIvk(context.Context, *IvkDecryptAndMarkParameters) (*DecryptNotesMarked, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanAndMarkNoteByIvk not implemented")
}
func (UnimplementedWalletServer) ScanNoteByOvk(context.Context, *OvkDecryptParameters) (*DecryptNotes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanNoteByOvk not implemented")
}
func (UnimplementedWalletServer) GetSpendingKey(context.Context, *EmptyMessage) (*BytesMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpendingKey not implemented")
}
func (UnimplementedWalletServer) GetExpandedSpendingKey(context.Context, *BytesMessage) (*ExpandedSpendingKeyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExpandedSpendingKey not implemented")
}
func (UnimplementedWalletServer) GetAkFromAsk(context.Context, *BytesMessage) (*BytesMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAkFromAsk not implemented")
}
func (UnimplementedWalletServer) GetNkFromNsk(context.Context, *BytesMessage) (*BytesMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNkFromNsk not implemented")
}
func (UnimplementedWalletServer) GetIncomingViewingKey(context.Context, *ViewingKeyMessage) (*IncomingViewingKeyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIncomingViewingKey not implemented")
}
func (UnimplementedWalletServer) GetDiversifier(context.Context, *EmptyMessage) (*DiversifierMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiversifier not implemented")
}
func (UnimplementedWalletServer) GetNewShieldedAddress(context.Context, *EmptyMessage) (*ShieldedAddressInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewShieldedAddress not implemented")
}
func (UnimplementedWalletServer) GetZenPaymentAddress(context.Context, *IncomingViewingKeyDiversifierMessage) (*PaymentAddressMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetZenPaymentAddress not implemented")
}
func (UnimplementedWalletServer) GetRcm(context.Context, *EmptyMessage) (*BytesMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRcm not implemented")
}
func (UnimplementedWalletServer) IsSpend(context.Context, *NoteParameters) (*SpendResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSpend not implemented")
}
func (UnimplementedWalletServer) CreateShieldedTransactionWithoutSpendAuthSig(context.Context, *PrivateParametersWithoutAsk) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShieldedTransactionWithoutSpendAuthSig not implemented")
}
func (UnimplementedWalletServer) GetShieldTransactionHash(context.Context, *core.Transaction) (*BytesMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShieldTransactionHash not implemented")
}
func (UnimplementedWalletServer) CreateSpendAuthSig(context.Context, *SpendAuthSigParameters) (*BytesMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpendAuthSig not implemented")
}
func (UnimplementedWalletServer) CreateShieldNullifier(context.Context, *NfParameters) (*BytesMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShieldNullifier not implemented")
}
func (UnimplementedWalletServer) CreateShieldedContractParameters(context.Context, *PrivateShieldedTRC20Parameters) (*ShieldedTRC20Parameters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShieldedContractParameters not implemented")
}
func (UnimplementedWalletServer) CreateShieldedContractParametersWithoutAsk(context.Context, *PrivateShieldedTRC20ParametersWithoutAsk) (*ShieldedTRC20Parameters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShieldedContractParametersWithoutAsk not implemented")
}
func (UnimplementedWalletServer) ScanShieldedTRC20NotesByIvk(context.Context, *IvkDecryptTRC20Parameters) (*DecryptNotesTRC20, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanShieldedTRC20NotesByIvk not implemented")
}
func (UnimplementedWalletServer) ScanShieldedTRC20NotesByOvk(context.Context, *OvkDecryptTRC20Parameters) (*DecryptNotesTRC20, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanShieldedTRC20NotesByOvk not implemented")
}
func (UnimplementedWalletServer) IsShieldedTRC20ContractNoteSpent(context.Context, *NfTRC20Parameters) (*NullifierResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsShieldedTRC20ContractNoteSpent not implemented")
}
func (UnimplementedWalletServer) GetTriggerInputForShieldedTRC20Contract(context.Context, *ShieldedTRC20TriggerContractParameters) (*BytesMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTriggerInputForShieldedTRC20Contract not implemented")
}
func (UnimplementedWalletServer) CreateCommonTransaction(context.Context, *core.Transaction) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommonTransaction not implemented")
}
func (UnimplementedWalletServer) GetTransactionInfoByBlockNum(context.Context, *NumberMessage) (*TransactionInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionInfoByBlockNum not implemented")
}
func (UnimplementedWalletServer) GetBurnTrx(context.Context, *EmptyMessage) (*NumberMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBurnTrx not implemented")
}
func (UnimplementedWalletServer) GetTransactionFromPending(context.Context, *BytesMessage) (*core.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionFromPending not implemented")
}
func (UnimplementedWalletServer) GetTransactionListFromPending(context.Context, *EmptyMessage) (*TransactionIdList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionListFromPending not implemented")
}
func (UnimplementedWalletServer) GetPendingSize(context.Context, *EmptyMessage) (*NumberMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingSize not implemented")
}
func (UnimplementedWalletServer) GetBlock(context.Context, *BlockReq) (*BlockExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (UnimplementedWalletServer) GetBandwidthPrices(context.Context, *EmptyMessage) (*PricesResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBandwidthPrices not implemented")
}
func (UnimplementedWalletServer) GetEnergyPrices(context.Context, *EmptyMessage) (*PricesResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnergyPrices not implemented")
}
func (UnimplementedWalletServer) GetMemoFee(context.Context, *EmptyMessage) (*PricesResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemoFee not implemented")
}
func (UnimplementedWalletServer) mustEmbedUnimplementedWalletServer() {}

// UnsafeWalletServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletServer will
// result in compilation errors.
type UnsafeWalletServer interface {
	mustEmbedUnimplementedWalletServer()
}

func RegisterWalletServer(s grpc.ServiceRegistrar, srv WalletServer) {
	s.RegisterService(&Wallet_ServiceDesc, srv)
}

func _Wallet_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAccount(ctx, req.(*core.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAccountById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAccountById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetAccountById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAccountById(ctx, req.(*core.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAccountBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.AccountBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAccountBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetAccountBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAccountBalance(ctx, req.(*core.AccountBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBlockBalanceTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.BlockBalanceTrace_BlockIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBlockBalanceTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetBlockBalanceTrace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBlockBalanceTrace(ctx, req.(*core.BlockBalanceTrace_BlockIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.TransferContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_CreateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateTransaction(ctx, req.(*core.TransferContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateTransaction2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.TransferContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateTransaction2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_CreateTransaction2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateTransaction2(ctx, req.(*core.TransferContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_BroadcastTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).BroadcastTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_BroadcastTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).BroadcastTransaction(ctx, req.(*core.Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.AccountUpdateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_UpdateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateAccount(ctx, req.(*core.AccountUpdateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_SetAccountId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.SetAccountIdContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).SetAccountId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_SetAccountId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).SetAccountId(ctx, req.(*core.SetAccountIdContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateAccount2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.AccountUpdateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateAccount2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_UpdateAccount2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateAccount2(ctx, req.(*core.AccountUpdateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_VoteWitnessAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.VoteWitnessContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).VoteWitnessAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_VoteWitnessAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).VoteWitnessAccount(ctx, req.(*core.VoteWitnessContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.UpdateSettingContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_UpdateSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateSetting(ctx, req.(*core.UpdateSettingContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateEnergyLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.UpdateEnergyLimitContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateEnergyLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_UpdateEnergyLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateEnergyLimit(ctx, req.(*core.UpdateEnergyLimitContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_VoteWitnessAccount2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.VoteWitnessContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).VoteWitnessAccount2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_VoteWitnessAccount2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).VoteWitnessAccount2(ctx, req.(*core.VoteWitnessContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateAssetIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.AssetIssueContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateAssetIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_CreateAssetIssue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateAssetIssue(ctx, req.(*core.AssetIssueContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateAssetIssue2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.AssetIssueContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateAssetIssue2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_CreateAssetIssue2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateAssetIssue2(ctx, req.(*core.AssetIssueContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateWitness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.WitnessUpdateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateWitness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_UpdateWitness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateWitness(ctx, req.(*core.WitnessUpdateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateWitness2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.WitnessUpdateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateWitness2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_UpdateWitness2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateWitness2(ctx, req.(*core.WitnessUpdateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.AccountCreateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateAccount(ctx, req.(*core.AccountCreateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateAccount2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.AccountCreateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateAccount2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_CreateAccount2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateAccount2(ctx, req.(*core.AccountCreateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateWitness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.WitnessCreateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateWitness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_CreateWitness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateWitness(ctx, req.(*core.WitnessCreateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateWitness2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.WitnessCreateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateWitness2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_CreateWitness2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateWitness2(ctx, req.(*core.WitnessCreateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_TransferAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.TransferAssetContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).TransferAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_TransferAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).TransferAsset(ctx, req.(*core.TransferAssetContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_TransferAsset2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.TransferAssetContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).TransferAsset2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_TransferAsset2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).TransferAsset2(ctx, req.(*core.TransferAssetContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ParticipateAssetIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.ParticipateAssetIssueContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ParticipateAssetIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_ParticipateAssetIssue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ParticipateAssetIssue(ctx, req.(*core.ParticipateAssetIssueContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ParticipateAssetIssue2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.ParticipateAssetIssueContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ParticipateAssetIssue2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_ParticipateAssetIssue2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ParticipateAssetIssue2(ctx, req.(*core.ParticipateAssetIssueContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_FreezeBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.FreezeBalanceContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).FreezeBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_FreezeBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).FreezeBalance(ctx, req.(*core.FreezeBalanceContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_FreezeBalance2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.FreezeBalanceContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).FreezeBalance2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_FreezeBalance2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).FreezeBalance2(ctx, req.(*core.FreezeBalanceContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_FreezeBalanceV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.FreezeBalanceV2Contract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).FreezeBalanceV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_FreezeBalanceV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).FreezeBalanceV2(ctx, req.(*core.FreezeBalanceV2Contract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UnfreezeBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.UnfreezeBalanceContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UnfreezeBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_UnfreezeBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UnfreezeBalance(ctx, req.(*core.UnfreezeBalanceContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UnfreezeBalance2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.UnfreezeBalanceContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UnfreezeBalance2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_UnfreezeBalance2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UnfreezeBalance2(ctx, req.(*core.UnfreezeBalanceContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UnfreezeBalanceV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.UnfreezeBalanceV2Contract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UnfreezeBalanceV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_UnfreezeBalanceV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UnfreezeBalanceV2(ctx, req.(*core.UnfreezeBalanceV2Contract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UnfreezeAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.UnfreezeAssetContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UnfreezeAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_UnfreezeAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UnfreezeAsset(ctx, req.(*core.UnfreezeAssetContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UnfreezeAsset2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.UnfreezeAssetContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UnfreezeAsset2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_UnfreezeAsset2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UnfreezeAsset2(ctx, req.(*core.UnfreezeAssetContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_WithdrawBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.WithdrawBalanceContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).WithdrawBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_WithdrawBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).WithdrawBalance(ctx, req.(*core.WithdrawBalanceContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_WithdrawBalance2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.WithdrawBalanceContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).WithdrawBalance2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_WithdrawBalance2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).WithdrawBalance2(ctx, req.(*core.WithdrawBalanceContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_WithdrawExpireUnfreeze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.WithdrawExpireUnfreezeContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).WithdrawExpireUnfreeze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_WithdrawExpireUnfreeze_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).WithdrawExpireUnfreeze(ctx, req.(*core.WithdrawExpireUnfreezeContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_DelegateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.DelegateResourceContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).DelegateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_DelegateResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).DelegateResource(ctx, req.(*core.DelegateResourceContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UnDelegateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.UnDelegateResourceContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UnDelegateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_UnDelegateResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UnDelegateResource(ctx, req.(*core.UnDelegateResourceContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CancelAllUnfreezeV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.CancelAllUnfreezeV2Contract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CancelAllUnfreezeV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_CancelAllUnfreezeV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CancelAllUnfreezeV2(ctx, req.(*core.CancelAllUnfreezeV2Contract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.UpdateAssetContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_UpdateAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateAsset(ctx, req.(*core.UpdateAssetContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateAsset2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.UpdateAssetContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateAsset2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_UpdateAsset2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateAsset2(ctx, req.(*core.UpdateAssetContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ProposalCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.ProposalCreateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ProposalCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_ProposalCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ProposalCreate(ctx, req.(*core.ProposalCreateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ProposalApprove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.ProposalApproveContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ProposalApprove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_ProposalApprove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ProposalApprove(ctx, req.(*core.ProposalApproveContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ProposalDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.ProposalDeleteContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ProposalDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_ProposalDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ProposalDelete(ctx, req.(*core.ProposalDeleteContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_BuyStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.BuyStorageContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).BuyStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_BuyStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).BuyStorage(ctx, req.(*core.BuyStorageContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_BuyStorageBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.BuyStorageBytesContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).BuyStorageBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_BuyStorageBytes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).BuyStorageBytes(ctx, req.(*core.BuyStorageBytesContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_SellStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.SellStorageContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).SellStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_SellStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).SellStorage(ctx, req.(*core.SellStorageContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ExchangeCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.ExchangeCreateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ExchangeCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_ExchangeCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ExchangeCreate(ctx, req.(*core.ExchangeCreateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ExchangeInject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.ExchangeInjectContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ExchangeInject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_ExchangeInject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ExchangeInject(ctx, req.(*core.ExchangeInjectContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ExchangeWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.ExchangeWithdrawContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ExchangeWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_ExchangeWithdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ExchangeWithdraw(ctx, req.(*core.ExchangeWithdrawContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ExchangeTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.ExchangeTransactionContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ExchangeTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_ExchangeTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ExchangeTransaction(ctx, req.(*core.ExchangeTransactionContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_MarketSellAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.MarketSellAssetContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).MarketSellAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_MarketSellAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).MarketSellAsset(ctx, req.(*core.MarketSellAssetContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_MarketCancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.MarketCancelOrderContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).MarketCancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_MarketCancelOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).MarketCancelOrder(ctx, req.(*core.MarketCancelOrderContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetMarketOrderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetMarketOrderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetMarketOrderById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetMarketOrderById(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetMarketOrderByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetMarketOrderByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetMarketOrderByAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetMarketOrderByAccount(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetMarketPriceByPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.MarketOrderPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetMarketPriceByPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetMarketPriceByPair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetMarketPriceByPair(ctx, req.(*core.MarketOrderPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetMarketOrderListByPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.MarketOrderPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetMarketOrderListByPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetMarketOrderListByPair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetMarketOrderListByPair(ctx, req.(*core.MarketOrderPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetMarketPairList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetMarketPairList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetMarketPairList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetMarketPairList(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_ListNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListNodes(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAssetIssueByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAssetIssueByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetAssetIssueByAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAssetIssueByAccount(ctx, req.(*core.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAccountNet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAccountNet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetAccountNet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAccountNet(ctx, req.(*core.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAccountResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAccountResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetAccountResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAccountResource(ctx, req.(*core.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAssetIssueByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAssetIssueByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetAssetIssueByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAssetIssueByName(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAssetIssueListByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAssetIssueListByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetAssetIssueListByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAssetIssueListByName(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAssetIssueById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAssetIssueById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetAssetIssueById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAssetIssueById(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetNowBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetNowBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetNowBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetNowBlock(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetNowBlock2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetNowBlock2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetNowBlock2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetNowBlock2(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBlockByNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBlockByNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetBlockByNum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBlockByNum(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBlockByNum2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBlockByNum2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetBlockByNum2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBlockByNum2(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetTransactionCountByBlockNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetTransactionCountByBlockNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetTransactionCountByBlockNum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetTransactionCountByBlockNum(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBlockById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBlockById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetBlockById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBlockById(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBlockByLimitNext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockLimit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBlockByLimitNext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetBlockByLimitNext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBlockByLimitNext(ctx, req.(*BlockLimit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBlockByLimitNext2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockLimit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBlockByLimitNext2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetBlockByLimitNext2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBlockByLimitNext2(ctx, req.(*BlockLimit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBlockByLatestNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBlockByLatestNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetBlockByLatestNum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBlockByLatestNum(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBlockByLatestNum2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBlockByLatestNum2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetBlockByLatestNum2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBlockByLatestNum2(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetTransactionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetTransactionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetTransactionById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetTransactionById(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_DeployContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.CreateSmartContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).DeployContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_DeployContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).DeployContract(ctx, req.(*core.CreateSmartContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetContract(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetContractInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetContractInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetContractInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetContractInfo(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_TriggerContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.TriggerSmartContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).TriggerContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_TriggerContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).TriggerContract(ctx, req.(*core.TriggerSmartContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_TriggerConstantContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.TriggerSmartContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).TriggerConstantContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_TriggerConstantContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).TriggerConstantContract(ctx, req.(*core.TriggerSmartContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_EstimateEnergy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.TriggerSmartContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).EstimateEnergy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_EstimateEnergy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).EstimateEnergy(ctx, req.(*core.TriggerSmartContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ClearContractABI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.ClearABIContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ClearContractABI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_ClearContractABI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ClearContractABI(ctx, req.(*core.ClearABIContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListWitnesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListWitnesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_ListWitnesses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListWitnesses(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetDelegatedResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelegatedResourceMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetDelegatedResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetDelegatedResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetDelegatedResource(ctx, req.(*DelegatedResourceMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetDelegatedResourceV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelegatedResourceMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetDelegatedResourceV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetDelegatedResourceV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetDelegatedResourceV2(ctx, req.(*DelegatedResourceMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetDelegatedResourceAccountIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetDelegatedResourceAccountIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetDelegatedResourceAccountIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetDelegatedResourceAccountIndex(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetDelegatedResourceAccountIndexV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetDelegatedResourceAccountIndexV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetDelegatedResourceAccountIndexV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetDelegatedResourceAccountIndexV2(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetCanDelegatedMaxSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanDelegatedMaxSizeRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetCanDelegatedMaxSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetCanDelegatedMaxSize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetCanDelegatedMaxSize(ctx, req.(*CanDelegatedMaxSizeRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAvailableUnfreezeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableUnfreezeCountRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAvailableUnfreezeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetAvailableUnfreezeCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAvailableUnfreezeCount(ctx, req.(*GetAvailableUnfreezeCountRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetCanWithdrawUnfreezeAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanWithdrawUnfreezeAmountRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetCanWithdrawUnfreezeAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetCanWithdrawUnfreezeAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetCanWithdrawUnfreezeAmount(ctx, req.(*CanWithdrawUnfreezeAmountRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListProposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListProposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_ListProposals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListProposals(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetPaginatedProposalList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetPaginatedProposalList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetPaginatedProposalList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetPaginatedProposalList(ctx, req.(*PaginatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetProposalById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetProposalById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetProposalById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetProposalById(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListExchanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListExchanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_ListExchanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListExchanges(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetPaginatedExchangeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetPaginatedExchangeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetPaginatedExchangeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetPaginatedExchangeList(ctx, req.(*PaginatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetExchangeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetExchangeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetExchangeById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetExchangeById(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetChainParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetChainParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetChainParameters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetChainParameters(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAssetIssueList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAssetIssueList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetAssetIssueList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAssetIssueList(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetPaginatedAssetIssueList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetPaginatedAssetIssueList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetPaginatedAssetIssueList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetPaginatedAssetIssueList(ctx, req.(*PaginatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_TotalTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).TotalTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_TotalTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).TotalTransaction(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetNextMaintenanceTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetNextMaintenanceTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetNextMaintenanceTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetNextMaintenanceTime(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetTransactionInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetTransactionInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetTransactionInfoById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetTransactionInfoById(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_AccountPermissionUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.AccountPermissionUpdateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).AccountPermissionUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_AccountPermissionUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).AccountPermissionUpdate(ctx, req.(*core.AccountPermissionUpdateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetTransactionSignWeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetTransactionSignWeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetTransactionSignWeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetTransactionSignWeight(ctx, req.(*core.Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetTransactionApprovedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetTransactionApprovedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetTransactionApprovedList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetTransactionApprovedList(ctx, req.(*core.Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetNodeInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetNodeInfo(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetRewardInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetRewardInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetRewardInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetRewardInfo(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBrokerageInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBrokerageInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetBrokerageInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBrokerageInfo(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateBrokerage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.UpdateBrokerageContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateBrokerage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_UpdateBrokerage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateBrokerage(ctx, req.(*core.UpdateBrokerageContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateShieldedTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateShieldedTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_CreateShieldedTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateShieldedTransaction(ctx, req.(*PrivateParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetMerkleTreeVoucherInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.OutputPointInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetMerkleTreeVoucherInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetMerkleTreeVoucherInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetMerkleTreeVoucherInfo(ctx, req.(*core.OutputPointInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ScanNoteByIvk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IvkDecryptParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ScanNoteByIvk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_ScanNoteByIvk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ScanNoteByIvk(ctx, req.(*IvkDecryptParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ScanAndMarkNoteByIvk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IvkDecryptAndMarkParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ScanAndMarkNoteByIvk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_ScanAndMarkNoteByIvk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ScanAndMarkNoteByIvk(ctx, req.(*IvkDecryptAndMarkParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ScanNoteByOvk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OvkDecryptParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ScanNoteByOvk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_ScanNoteByOvk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ScanNoteByOvk(ctx, req.(*OvkDecryptParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetSpendingKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetSpendingKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetSpendingKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetSpendingKey(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetExpandedSpendingKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetExpandedSpendingKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetExpandedSpendingKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetExpandedSpendingKey(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAkFromAsk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAkFromAsk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetAkFromAsk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAkFromAsk(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetNkFromNsk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetNkFromNsk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetNkFromNsk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetNkFromNsk(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetIncomingViewingKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewingKeyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetIncomingViewingKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetIncomingViewingKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetIncomingViewingKey(ctx, req.(*ViewingKeyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetDiversifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetDiversifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetDiversifier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetDiversifier(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetNewShieldedAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetNewShieldedAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetNewShieldedAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetNewShieldedAddress(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetZenPaymentAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncomingViewingKeyDiversifierMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetZenPaymentAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetZenPaymentAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetZenPaymentAddress(ctx, req.(*IncomingViewingKeyDiversifierMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetRcm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetRcm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetRcm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetRcm(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_IsSpend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoteParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).IsSpend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_IsSpend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).IsSpend(ctx, req.(*NoteParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateShieldedTransactionWithoutSpendAuthSig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateParametersWithoutAsk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateShieldedTransactionWithoutSpendAuthSig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_CreateShieldedTransactionWithoutSpendAuthSig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateShieldedTransactionWithoutSpendAuthSig(ctx, req.(*PrivateParametersWithoutAsk))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetShieldTransactionHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetShieldTransactionHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetShieldTransactionHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetShieldTransactionHash(ctx, req.(*core.Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateSpendAuthSig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpendAuthSigParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateSpendAuthSig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_CreateSpendAuthSig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateSpendAuthSig(ctx, req.(*SpendAuthSigParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateShieldNullifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NfParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateShieldNullifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_CreateShieldNullifier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateShieldNullifier(ctx, req.(*NfParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateShieldedContractParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateShieldedTRC20Parameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateShieldedContractParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_CreateShieldedContractParameters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateShieldedContractParameters(ctx, req.(*PrivateShieldedTRC20Parameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateShieldedContractParametersWithoutAsk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateShieldedTRC20ParametersWithoutAsk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateShieldedContractParametersWithoutAsk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_CreateShieldedContractParametersWithoutAsk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateShieldedContractParametersWithoutAsk(ctx, req.(*PrivateShieldedTRC20ParametersWithoutAsk))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ScanShieldedTRC20NotesByIvk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IvkDecryptTRC20Parameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ScanShieldedTRC20NotesByIvk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_ScanShieldedTRC20NotesByIvk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ScanShieldedTRC20NotesByIvk(ctx, req.(*IvkDecryptTRC20Parameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ScanShieldedTRC20NotesByOvk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OvkDecryptTRC20Parameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ScanShieldedTRC20NotesByOvk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_ScanShieldedTRC20NotesByOvk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ScanShieldedTRC20NotesByOvk(ctx, req.(*OvkDecryptTRC20Parameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_IsShieldedTRC20ContractNoteSpent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NfTRC20Parameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).IsShieldedTRC20ContractNoteSpent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_IsShieldedTRC20ContractNoteSpent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).IsShieldedTRC20ContractNoteSpent(ctx, req.(*NfTRC20Parameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetTriggerInputForShieldedTRC20Contract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShieldedTRC20TriggerContractParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetTriggerInputForShieldedTRC20Contract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetTriggerInputForShieldedTRC20Contract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetTriggerInputForShieldedTRC20Contract(ctx, req.(*ShieldedTRC20TriggerContractParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateCommonTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateCommonTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_CreateCommonTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateCommonTransaction(ctx, req.(*core.Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetTransactionInfoByBlockNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetTransactionInfoByBlockNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetTransactionInfoByBlockNum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetTransactionInfoByBlockNum(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBurnTrx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBurnTrx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetBurnTrx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBurnTrx(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetTransactionFromPending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetTransactionFromPending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetTransactionFromPending_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetTransactionFromPending(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetTransactionListFromPending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetTransactionListFromPending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetTransactionListFromPending_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetTransactionListFromPending(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetPendingSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetPendingSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetPendingSize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetPendingSize(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBlock(ctx, req.(*BlockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBandwidthPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBandwidthPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetBandwidthPrices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBandwidthPrices(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetEnergyPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetEnergyPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetEnergyPrices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetEnergyPrices(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetMemoFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetMemoFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetMemoFee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetMemoFee(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Wallet_ServiceDesc is the grpc.ServiceDesc for Wallet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wallet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Wallet",
	HandlerType: (*WalletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccount",
			Handler:    _Wallet_GetAccount_Handler,
		},
		{
			MethodName: "GetAccountById",
			Handler:    _Wallet_GetAccountById_Handler,
		},
		{
			MethodName: "GetAccountBalance",
			Handler:    _Wallet_GetAccountBalance_Handler,
		},
		{
			MethodName: "GetBlockBalanceTrace",
			Handler:    _Wallet_GetBlockBalanceTrace_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _Wallet_CreateTransaction_Handler,
		},
		{
			MethodName: "CreateTransaction2",
			Handler:    _Wallet_CreateTransaction2_Handler,
		},
		{
			MethodName: "BroadcastTransaction",
			Handler:    _Wallet_BroadcastTransaction_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _Wallet_UpdateAccount_Handler,
		},
		{
			MethodName: "SetAccountId",
			Handler:    _Wallet_SetAccountId_Handler,
		},
		{
			MethodName: "UpdateAccount2",
			Handler:    _Wallet_UpdateAccount2_Handler,
		},
		{
			MethodName: "VoteWitnessAccount",
			Handler:    _Wallet_VoteWitnessAccount_Handler,
		},
		{
			MethodName: "UpdateSetting",
			Handler:    _Wallet_UpdateSetting_Handler,
		},
		{
			MethodName: "UpdateEnergyLimit",
			Handler:    _Wallet_UpdateEnergyLimit_Handler,
		},
		{
			MethodName: "VoteWitnessAccount2",
			Handler:    _Wallet_VoteWitnessAccount2_Handler,
		},
		{
			MethodName: "CreateAssetIssue",
			Handler:    _Wallet_CreateAssetIssue_Handler,
		},
		{
			MethodName: "CreateAssetIssue2",
			Handler:    _Wallet_CreateAssetIssue2_Handler,
		},
		{
			MethodName: "UpdateWitness",
			Handler:    _Wallet_UpdateWitness_Handler,
		},
		{
			MethodName: "UpdateWitness2",
			Handler:    _Wallet_UpdateWitness2_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _Wallet_CreateAccount_Handler,
		},
		{
			MethodName: "CreateAccount2",
			Handler:    _Wallet_CreateAccount2_Handler,
		},
		{
			MethodName: "CreateWitness",
			Handler:    _Wallet_CreateWitness_Handler,
		},
		{
			MethodName: "CreateWitness2",
			Handler:    _Wallet_CreateWitness2_Handler,
		},
		{
			MethodName: "TransferAsset",
			Handler:    _Wallet_TransferAsset_Handler,
		},
		{
			MethodName: "TransferAsset2",
			Handler:    _Wallet_TransferAsset2_Handler,
		},
		{
			MethodName: "ParticipateAssetIssue",
			Handler:    _Wallet_ParticipateAssetIssue_Handler,
		},
		{
			MethodName: "ParticipateAssetIssue2",
			Handler:    _Wallet_ParticipateAssetIssue2_Handler,
		},
		{
			MethodName: "FreezeBalance",
			Handler:    _Wallet_FreezeBalance_Handler,
		},
		{
			MethodName: "FreezeBalance2",
			Handler:    _Wallet_FreezeBalance2_Handler,
		},
		{
			MethodName: "FreezeBalanceV2",
			Handler:    _Wallet_FreezeBalanceV2_Handler,
		},
		{
			MethodName: "UnfreezeBalance",
			Handler:    _Wallet_UnfreezeBalance_Handler,
		},
		{
			MethodName: "UnfreezeBalance2",
			Handler:    _Wallet_UnfreezeBalance2_Handler,
		},
		{
			MethodName: "UnfreezeBalanceV2",
			Handler:    _Wallet_UnfreezeBalanceV2_Handler,
		},
		{
			MethodName: "UnfreezeAsset",
			Handler:    _Wallet_UnfreezeAsset_Handler,
		},
		{
			MethodName: "UnfreezeAsset2",
			Handler:    _Wallet_UnfreezeAsset2_Handler,
		},
		{
			MethodName: "WithdrawBalance",
			Handler:    _Wallet_WithdrawBalance_Handler,
		},
		{
			MethodName: "WithdrawBalance2",
			Handler:    _Wallet_WithdrawBalance2_Handler,
		},
		{
			MethodName: "WithdrawExpireUnfreeze",
			Handler:    _Wallet_WithdrawExpireUnfreeze_Handler,
		},
		{
			MethodName: "DelegateResource",
			Handler:    _Wallet_DelegateResource_Handler,
		},
		{
			MethodName: "UnDelegateResource",
			Handler:    _Wallet_UnDelegateResource_Handler,
		},
		{
			MethodName: "CancelAllUnfreezeV2",
			Handler:    _Wallet_CancelAllUnfreezeV2_Handler,
		},
		{
			MethodName: "UpdateAsset",
			Handler:    _Wallet_UpdateAsset_Handler,
		},
		{
			MethodName: "UpdateAsset2",
			Handler:    _Wallet_UpdateAsset2_Handler,
		},
		{
			MethodName: "ProposalCreate",
			Handler:    _Wallet_ProposalCreate_Handler,
		},
		{
			MethodName: "ProposalApprove",
			Handler:    _Wallet_ProposalApprove_Handler,
		},
		{
			MethodName: "ProposalDelete",
			Handler:    _Wallet_ProposalDelete_Handler,
		},
		{
			MethodName: "BuyStorage",
			Handler:    _Wallet_BuyStorage_Handler,
		},
		{
			MethodName: "BuyStorageBytes",
			Handler:    _Wallet_BuyStorageBytes_Handler,
		},
		{
			MethodName: "SellStorage",
			Handler:    _Wallet_SellStorage_Handler,
		},
		{
			MethodName: "ExchangeCreate",
			Handler:    _Wallet_ExchangeCreate_Handler,
		},
		{
			MethodName: "ExchangeInject",
			Handler:    _Wallet_ExchangeInject_Handler,
		},
		{
			MethodName: "ExchangeWithdraw",
			Handler:    _Wallet_ExchangeWithdraw_Handler,
		},
		{
			MethodName: "ExchangeTransaction",
			Handler:    _Wallet_ExchangeTransaction_Handler,
		},
		{
			MethodName: "MarketSellAsset",
			Handler:    _Wallet_MarketSellAsset_Handler,
		},
		{
			MethodName: "MarketCancelOrder",
			Handler:    _Wallet_MarketCancelOrder_Handler,
		},
		{
			MethodName: "GetMarketOrderById",
			Handler:    _Wallet_GetMarketOrderById_Handler,
		},
		{
			MethodName: "GetMarketOrderByAccount",
			Handler:    _Wallet_GetMarketOrderByAccount_Handler,
		},
		{
			MethodName: "GetMarketPriceByPair",
			Handler:    _Wallet_GetMarketPriceByPair_Handler,
		},
		{
			MethodName: "GetMarketOrderListByPair",
			Handler:    _Wallet_GetMarketOrderListByPair_Handler,
		},
		{
			MethodName: "GetMarketPairList",
			Handler:    _Wallet_GetMarketPairList_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _Wallet_ListNodes_Handler,
		},
		{
			MethodName: "GetAssetIssueByAccount",
			Handler:    _Wallet_GetAssetIssueByAccount_Handler,
		},
		{
			MethodName: "GetAccountNet",
			Handler:    _Wallet_GetAccountNet_Handler,
		},
		{
			MethodName: "GetAccountResource",
			Handler:    _Wallet_GetAccountResource_Handler,
		},
		{
			MethodName: "GetAssetIssueByName",
			Handler:    _Wallet_GetAssetIssueByName_Handler,
		},
		{
			MethodName: "GetAssetIssueListByName",
			Handler:    _Wallet_GetAssetIssueListByName_Handler,
		},
		{
			MethodName: "GetAssetIssueById",
			Handler:    _Wallet_GetAssetIssueById_Handler,
		},
		{
			MethodName: "GetNowBlock",
			Handler:    _Wallet_GetNowBlock_Handler,
		},
		{
			MethodName: "GetNowBlock2",
			Handler:    _Wallet_GetNowBlock2_Handler,
		},
		{
			MethodName: "GetBlockByNum",
			Handler:    _Wallet_GetBlockByNum_Handler,
		},
		{
			MethodName: "GetBlockByNum2",
			Handler:    _Wallet_GetBlockByNum2_Handler,
		},
		{
			MethodName: "GetTransactionCountByBlockNum",
			Handler:    _Wallet_GetTransactionCountByBlockNum_Handler,
		},
		{
			MethodName: "GetBlockById",
			Handler:    _Wallet_GetBlockById_Handler,
		},
		{
			MethodName: "GetBlockByLimitNext",
			Handler:    _Wallet_GetBlockByLimitNext_Handler,
		},
		{
			MethodName: "GetBlockByLimitNext2",
			Handler:    _Wallet_GetBlockByLimitNext2_Handler,
		},
		{
			MethodName: "GetBlockByLatestNum",
			Handler:    _Wallet_GetBlockByLatestNum_Handler,
		},
		{
			MethodName: "GetBlockByLatestNum2",
			Handler:    _Wallet_GetBlockByLatestNum2_Handler,
		},
		{
			MethodName: "GetTransactionById",
			Handler:    _Wallet_GetTransactionById_Handler,
		},
		{
			MethodName: "DeployContract",
			Handler:    _Wallet_DeployContract_Handler,
		},
		{
			MethodName: "GetContract",
			Handler:    _Wallet_GetContract_Handler,
		},
		{
			MethodName: "GetContractInfo",
			Handler:    _Wallet_GetContractInfo_Handler,
		},
		{
			MethodName: "TriggerContract",
			Handler:    _Wallet_TriggerContract_Handler,
		},
		{
			MethodName: "TriggerConstantContract",
			Handler:    _Wallet_TriggerConstantContract_Handler,
		},
		{
			MethodName: "EstimateEnergy",
			Handler:    _Wallet_EstimateEnergy_Handler,
		},
		{
			MethodName: "ClearContractABI",
			Handler:    _Wallet_ClearContractABI_Handler,
		},
		{
			MethodName: "ListWitnesses",
			Handler:    _Wallet_ListWitnesses_Handler,
		},
		{
			MethodName: "GetDelegatedResource",
			Handler:    _Wallet_GetDelegatedResource_Handler,
		},
		{
			MethodName: "GetDelegatedResourceV2",
			Handler:    _Wallet_GetDelegatedResourceV2_Handler,
		},
		{
			MethodName: "GetDelegatedResourceAccountIndex",
			Handler:    _Wallet_GetDelegatedResourceAccountIndex_Handler,
		},
		{
			MethodName: "GetDelegatedResourceAccountIndexV2",
			Handler:    _Wallet_GetDelegatedResourceAccountIndexV2_Handler,
		},
		{
			MethodName: "GetCanDelegatedMaxSize",
			Handler:    _Wallet_GetCanDelegatedMaxSize_Handler,
		},
		{
			MethodName: "GetAvailableUnfreezeCount",
			Handler:    _Wallet_GetAvailableUnfreezeCount_Handler,
		},
		{
			MethodName: "GetCanWithdrawUnfreezeAmount",
			Handler:    _Wallet_GetCanWithdrawUnfreezeAmount_Handler,
		},
		{
			MethodName: "ListProposals",
			Handler:    _Wallet_ListProposals_Handler,
		},
		{
			MethodName: "GetPaginatedProposalList",
			Handler:    _Wallet_GetPaginatedProposalList_Handler,
		},
		{
			MethodName: "GetProposalById",
			Handler:    _Wallet_GetProposalById_Handler,
		},
		{
			MethodName: "ListExchanges",
			Handler:    _Wallet_ListExchanges_Handler,
		},
		{
			MethodName: "GetPaginatedExchangeList",
			Handler:    _Wallet_GetPaginatedExchangeList_Handler,
		},
		{
			MethodName: "GetExchangeById",
			Handler:    _Wallet_GetExchangeById_Handler,
		},
		{
			MethodName: "GetChainParameters",
			Handler:    _Wallet_GetChainParameters_Handler,
		},
		{
			MethodName: "GetAssetIssueList",
			Handler:    _Wallet_GetAssetIssueList_Handler,
		},
		{
			MethodName: "GetPaginatedAssetIssueList",
			Handler:    _Wallet_GetPaginatedAssetIssueList_Handler,
		},
		{
			MethodName: "TotalTransaction",
			Handler:    _Wallet_TotalTransaction_Handler,
		},
		{
			MethodName: "GetNextMaintenanceTime",
			Handler:    _Wallet_GetNextMaintenanceTime_Handler,
		},
		{
			MethodName: "GetTransactionInfoById",
			Handler:    _Wallet_GetTransactionInfoById_Handler,
		},
		{
			MethodName: "AccountPermissionUpdate",
			Handler:    _Wallet_AccountPermissionUpdate_Handler,
		},
		{
			MethodName: "GetTransactionSignWeight",
			Handler:    _Wallet_GetTransactionSignWeight_Handler,
		},
		{
			MethodName: "GetTransactionApprovedList",
			Handler:    _Wallet_GetTransactionApprovedList_Handler,
		},
		{
			MethodName: "GetNodeInfo",
			Handler:    _Wallet_GetNodeInfo_Handler,
		},
		{
			MethodName: "GetRewardInfo",
			Handler:    _Wallet_GetRewardInfo_Handler,
		},
		{
			MethodName: "GetBrokerageInfo",
			Handler:    _Wallet_GetBrokerageInfo_Handler,
		},
		{
			MethodName: "UpdateBrokerage",
			Handler:    _Wallet_UpdateBrokerage_Handler,
		},
		{
			MethodName: "CreateShieldedTransaction",
			Handler:    _Wallet_CreateShieldedTransaction_Handler,
		},
		{
			MethodName: "GetMerkleTreeVoucherInfo",
			Handler:    _Wallet_GetMerkleTreeVoucherInfo_Handler,
		},
		{
			MethodName: "ScanNoteByIvk",
			Handler:    _Wallet_ScanNoteByIvk_Handler,
		},
		{
			MethodName: "ScanAndMarkNoteByIvk",
			Handler:    _Wallet_ScanAndMarkNoteByIvk_Handler,
		},
		{
			MethodName: "ScanNoteByOvk",
			Handler:    _Wallet_ScanNoteByOvk_Handler,
		},
		{
			MethodName: "GetSpendingKey",
			Handler:    _Wallet_GetSpendingKey_Handler,
		},
		{
			MethodName: "GetExpandedSpendingKey",
			Handler:    _Wallet_GetExpandedSpendingKey_Handler,
		},
		{
			MethodName: "GetAkFromAsk",
			Handler:    _Wallet_GetAkFromAsk_Handler,
		},
		{
			MethodName: "GetNkFromNsk",
			Handler:    _Wallet_GetNkFromNsk_Handler,
		},
		{
			MethodName: "GetIncomingViewingKey",
			Handler:    _Wallet_GetIncomingViewingKey_Handler,
		},
		{
			MethodName: "GetDiversifier",
			Handler:    _Wallet_GetDiversifier_Handler,
		},
		{
			MethodName: "GetNewShieldedAddress",
			Handler:    _Wallet_GetNewShieldedAddress_Handler,
		},
		{
			MethodName: "GetZenPaymentAddress",
			Handler:    _Wallet_GetZenPaymentAddress_Handler,
		},
		{
			MethodName: "GetRcm",
			Handler:    _Wallet_GetRcm_Handler,
		},
		{
			MethodName: "IsSpend",
			Handler:    _Wallet_IsSpend_Handler,
		},
		{
			MethodName: "CreateShieldedTransactionWithoutSpendAuthSig",
			Handler:    _Wallet_CreateShieldedTransactionWithoutSpendAuthSig_Handler,
		},
		{
			MethodName: "GetShieldTransactionHash",
			Handler:    _Wallet_GetShieldTransactionHash_Handler,
		},
		{
			MethodName: "CreateSpendAuthSig",
			Handler:    _Wallet_CreateSpendAuthSig_Handler,
		},
		{
			MethodName: "CreateShieldNullifier",
			Handler:    _Wallet_CreateShieldNullifier_Handler,
		},
		{
			MethodName: "CreateShieldedContractParameters",
			Handler:    _Wallet_CreateShieldedContractParameters_Handler,
		},
		{
			MethodName: "CreateShieldedContractParametersWithoutAsk",
			Handler:    _Wallet_CreateShieldedContractParametersWithoutAsk_Handler,
		},
		{
			MethodName: "ScanShieldedTRC20NotesByIvk",
			Handler:    _Wallet_ScanShieldedTRC20NotesByIvk_Handler,
		},
		{
			MethodName: "ScanShieldedTRC20NotesByOvk",
			Handler:    _Wallet_ScanShieldedTRC20NotesByOvk_Handler,
		},
		{
			MethodName: "IsShieldedTRC20ContractNoteSpent",
			Handler:    _Wallet_IsShieldedTRC20ContractNoteSpent_Handler,
		},
		{
			MethodName: "GetTriggerInputForShieldedTRC20Contract",
			Handler:    _Wallet_GetTriggerInputForShieldedTRC20Contract_Handler,
		},
		{
			MethodName: "CreateCommonTransaction",
			Handler:    _Wallet_CreateCommonTransaction_Handler,
		},
		{
			MethodName: "GetTransactionInfoByBlockNum",
			Handler:    _Wallet_GetTransactionInfoByBlockNum_Handler,
		},
		{
			MethodName: "GetBurnTrx",
			Handler:    _Wallet_GetBurnTrx_Handler,
		},
		{
			MethodName: "GetTransactionFromPending",
			Handler:    _Wallet_GetTransactionFromPending_Handler,
		},
		{
			MethodName: "GetTransactionListFromPending",
			Handler:    _Wallet_GetTransactionListFromPending_Handler,
		},
		{
			MethodName: "GetPendingSize",
			Handler:    _Wallet_GetPendingSize_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _Wallet_GetBlock_Handler,
		},
		{
			MethodName: "GetBandwidthPrices",
			Handler:    _Wallet_GetBandwidthPrices_Handler,
		},
		{
			MethodName: "GetEnergyPrices",
			Handler:    _Wallet_GetEnergyPrices_Handler,
		},
		{
			MethodName: "GetMemoFee",
			Handler:    _Wallet_GetMemoFee_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

const (
	WalletSolidity_GetAccount_FullMethodName                         = "/protocol.WalletSolidity/GetAccount"
	WalletSolidity_GetAccountById_FullMethodName                     = "/protocol.WalletSolidity/GetAccountById"
	WalletSolidity_ListWitnesses_FullMethodName                      = "/protocol.WalletSolidity/ListWitnesses"
	WalletSolidity_GetAssetIssueList_FullMethodName                  = "/protocol.WalletSolidity/GetAssetIssueList"
	WalletSolidity_GetPaginatedAssetIssueList_FullMethodName         = "/protocol.WalletSolidity/GetPaginatedAssetIssueList"
	WalletSolidity_GetAssetIssueByName_FullMethodName                = "/protocol.WalletSolidity/GetAssetIssueByName"
	WalletSolidity_GetAssetIssueListByName_FullMethodName            = "/protocol.WalletSolidity/GetAssetIssueListByName"
	WalletSolidity_GetAssetIssueById_FullMethodName                  = "/protocol.WalletSolidity/GetAssetIssueById"
	WalletSolidity_GetNowBlock_FullMethodName                        = "/protocol.WalletSolidity/GetNowBlock"
	WalletSolidity_GetNowBlock2_FullMethodName                       = "/protocol.WalletSolidity/GetNowBlock2"
	WalletSolidity_GetBlockByNum_FullMethodName                      = "/protocol.WalletSolidity/GetBlockByNum"
	WalletSolidity_GetBlockByNum2_FullMethodName                     = "/protocol.WalletSolidity/GetBlockByNum2"
	WalletSolidity_GetTransactionCountByBlockNum_FullMethodName      = "/protocol.WalletSolidity/GetTransactionCountByBlockNum"
	WalletSolidity_GetDelegatedResource_FullMethodName               = "/protocol.WalletSolidity/GetDelegatedResource"
	WalletSolidity_GetDelegatedResourceV2_FullMethodName             = "/protocol.WalletSolidity/GetDelegatedResourceV2"
	WalletSolidity_GetDelegatedResourceAccountIndex_FullMethodName   = "/protocol.WalletSolidity/GetDelegatedResourceAccountIndex"
	WalletSolidity_GetDelegatedResourceAccountIndexV2_FullMethodName = "/protocol.WalletSolidity/GetDelegatedResourceAccountIndexV2"
	WalletSolidity_GetCanDelegatedMaxSize_FullMethodName             = "/protocol.WalletSolidity/GetCanDelegatedMaxSize"
	WalletSolidity_GetAvailableUnfreezeCount_FullMethodName          = "/protocol.WalletSolidity/GetAvailableUnfreezeCount"
	WalletSolidity_GetCanWithdrawUnfreezeAmount_FullMethodName       = "/protocol.WalletSolidity/GetCanWithdrawUnfreezeAmount"
	WalletSolidity_GetExchangeById_FullMethodName                    = "/protocol.WalletSolidity/GetExchangeById"
	WalletSolidity_ListExchanges_FullMethodName                      = "/protocol.WalletSolidity/ListExchanges"
	WalletSolidity_GetTransactionById_FullMethodName                 = "/protocol.WalletSolidity/GetTransactionById"
	WalletSolidity_GetTransactionInfoById_FullMethodName             = "/protocol.WalletSolidity/GetTransactionInfoById"
	WalletSolidity_GetMerkleTreeVoucherInfo_FullMethodName           = "/protocol.WalletSolidity/GetMerkleTreeVoucherInfo"
	WalletSolidity_ScanNoteByIvk_FullMethodName                      = "/protocol.WalletSolidity/ScanNoteByIvk"
	WalletSolidity_ScanAndMarkNoteByIvk_FullMethodName               = "/protocol.WalletSolidity/ScanAndMarkNoteByIvk"
	WalletSolidity_ScanNoteByOvk_FullMethodName                      = "/protocol.WalletSolidity/ScanNoteByOvk"
	WalletSolidity_IsSpend_FullMethodName                            = "/protocol.WalletSolidity/IsSpend"
	WalletSolidity_ScanShieldedTRC20NotesByIvk_FullMethodName        = "/protocol.WalletSolidity/ScanShieldedTRC20NotesByIvk"
	WalletSolidity_ScanShieldedTRC20NotesByOvk_FullMethodName        = "/protocol.WalletSolidity/ScanShieldedTRC20NotesByOvk"
	WalletSolidity_IsShieldedTRC20ContractNoteSpent_FullMethodName   = "/protocol.WalletSolidity/IsShieldedTRC20ContractNoteSpent"
	WalletSolidity_GetRewardInfo_FullMethodName                      = "/protocol.WalletSolidity/GetRewardInfo"
	WalletSolidity_GetBrokerageInfo_FullMethodName                   = "/protocol.WalletSolidity/GetBrokerageInfo"
	WalletSolidity_TriggerConstantContract_FullMethodName            = "/protocol.WalletSolidity/TriggerConstantContract"
	WalletSolidity_EstimateEnergy_FullMethodName                     = "/protocol.WalletSolidity/EstimateEnergy"
	WalletSolidity_GetTransactionInfoByBlockNum_FullMethodName       = "/protocol.WalletSolidity/GetTransactionInfoByBlockNum"
	WalletSolidity_GetMarketOrderById_FullMethodName                 = "/protocol.WalletSolidity/GetMarketOrderById"
	WalletSolidity_GetMarketOrderByAccount_FullMethodName            = "/protocol.WalletSolidity/GetMarketOrderByAccount"
	WalletSolidity_GetMarketPriceByPair_FullMethodName               = "/protocol.WalletSolidity/GetMarketPriceByPair"
	WalletSolidity_GetMarketOrderListByPair_FullMethodName           = "/protocol.WalletSolidity/GetMarketOrderListByPair"
	WalletSolidity_GetMarketPairList_FullMethodName                  = "/protocol.WalletSolidity/GetMarketPairList"
	WalletSolidity_GetBurnTrx_FullMethodName                         = "/protocol.WalletSolidity/GetBurnTrx"
	WalletSolidity_GetBlock_FullMethodName                           = "/protocol.WalletSolidity/GetBlock"
	WalletSolidity_GetBandwidthPrices_FullMethodName                 = "/protocol.WalletSolidity/GetBandwidthPrices"
	WalletSolidity_GetEnergyPrices_FullMethodName                    = "/protocol.WalletSolidity/GetEnergyPrices"
)

// WalletSolidityClient is the client API for WalletSolidity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletSolidityClient interface {
	GetAccount(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*core.Account, error)
	GetAccountById(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*core.Account, error)
	ListWitnesses(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*WitnessList, error)
	GetAssetIssueList(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AssetIssueList, error)
	GetPaginatedAssetIssueList(ctx context.Context, in *PaginatedMessage, opts ...grpc.CallOption) (*AssetIssueList, error)
	GetAssetIssueByName(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.AssetIssueContract, error)
	GetAssetIssueListByName(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*AssetIssueList, error)
	GetAssetIssueById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.AssetIssueContract, error)
	// Please use GetNowBlock2 instead of this function.
	GetNowBlock(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.Block, error)
	// Use this function instead of GetNowBlock.
	GetNowBlock2(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*BlockExtention, error)
	// Please use GetBlockByNum2 instead of this function.
	GetBlockByNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*core.Block, error)
	// Use this function instead of GetBlockByNum.
	GetBlockByNum2(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*BlockExtention, error)
	GetTransactionCountByBlockNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*NumberMessage, error)
	GetDelegatedResource(ctx context.Context, in *DelegatedResourceMessage, opts ...grpc.CallOption) (*DelegatedResourceList, error)
	GetDelegatedResourceV2(ctx context.Context, in *DelegatedResourceMessage, opts ...grpc.CallOption) (*DelegatedResourceList, error)
	GetDelegatedResourceAccountIndex(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.DelegatedResourceAccountIndex, error)
	GetDelegatedResourceAccountIndexV2(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.DelegatedResourceAccountIndex, error)
	GetCanDelegatedMaxSize(ctx context.Context, in *CanDelegatedMaxSizeRequestMessage, opts ...grpc.CallOption) (*CanDelegatedMaxSizeResponseMessage, error)
	GetAvailableUnfreezeCount(ctx context.Context, in *GetAvailableUnfreezeCountRequestMessage, opts ...grpc.CallOption) (*GetAvailableUnfreezeCountResponseMessage, error)
	GetCanWithdrawUnfreezeAmount(ctx context.Context, in *CanWithdrawUnfreezeAmountRequestMessage, opts ...grpc.CallOption) (*CanWithdrawUnfreezeAmountResponseMessage, error)
	GetExchangeById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Exchange, error)
	ListExchanges(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*ExchangeList, error)
	GetTransactionById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Transaction, error)
	GetTransactionInfoById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.TransactionInfo, error)
	GetMerkleTreeVoucherInfo(ctx context.Context, in *core.OutputPointInfo, opts ...grpc.CallOption) (*core.IncrementalMerkleVoucherInfo, error)
	ScanNoteByIvk(ctx context.Context, in *IvkDecryptParameters, opts ...grpc.CallOption) (*DecryptNotes, error)
	ScanAndMarkNoteByIvk(ctx context.Context, in *IvkDecryptAndMarkParameters, opts ...grpc.CallOption) (*DecryptNotesMarked, error)
	ScanNoteByOvk(ctx context.Context, in *OvkDecryptParameters, opts ...grpc.CallOption) (*DecryptNotes, error)
	IsSpend(ctx context.Context, in *NoteParameters, opts ...grpc.CallOption) (*SpendResult, error)
	ScanShieldedTRC20NotesByIvk(ctx context.Context, in *IvkDecryptTRC20Parameters, opts ...grpc.CallOption) (*DecryptNotesTRC20, error)
	ScanShieldedTRC20NotesByOvk(ctx context.Context, in *OvkDecryptTRC20Parameters, opts ...grpc.CallOption) (*DecryptNotesTRC20, error)
	IsShieldedTRC20ContractNoteSpent(ctx context.Context, in *NfTRC20Parameters, opts ...grpc.CallOption) (*NullifierResult, error)
	GetRewardInfo(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*NumberMessage, error)
	GetBrokerageInfo(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*NumberMessage, error)
	TriggerConstantContract(ctx context.Context, in *core.TriggerSmartContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	EstimateEnergy(ctx context.Context, in *core.TriggerSmartContract, opts ...grpc.CallOption) (*EstimateEnergyMessage, error)
	GetTransactionInfoByBlockNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*TransactionInfoList, error)
	GetMarketOrderById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.MarketOrder, error)
	GetMarketOrderByAccount(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.MarketOrderList, error)
	GetMarketPriceByPair(ctx context.Context, in *core.MarketOrderPair, opts ...grpc.CallOption) (*core.MarketPriceList, error)
	GetMarketOrderListByPair(ctx context.Context, in *core.MarketOrderPair, opts ...grpc.CallOption) (*core.MarketOrderList, error)
	GetMarketPairList(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.MarketOrderPairList, error)
	GetBurnTrx(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NumberMessage, error)
	GetBlock(ctx context.Context, in *BlockReq, opts ...grpc.CallOption) (*BlockExtention, error)
	GetBandwidthPrices(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*PricesResponseMessage, error)
	GetEnergyPrices(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*PricesResponseMessage, error)
}

type walletSolidityClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletSolidityClient(cc grpc.ClientConnInterface) WalletSolidityClient {
	return &walletSolidityClient{cc}
}

func (c *walletSolidityClient) GetAccount(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*core.Account, error) {
	out := new(core.Account)
	err := c.cc.Invoke(ctx, WalletSolidity_GetAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetAccountById(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*core.Account, error) {
	out := new(core.Account)
	err := c.cc.Invoke(ctx, WalletSolidity_GetAccountById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) ListWitnesses(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*WitnessList, error) {
	out := new(WitnessList)
	err := c.cc.Invoke(ctx, WalletSolidity_ListWitnesses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetAssetIssueList(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AssetIssueList, error) {
	out := new(AssetIssueList)
	err := c.cc.Invoke(ctx, WalletSolidity_GetAssetIssueList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetPaginatedAssetIssueList(ctx context.Context, in *PaginatedMessage, opts ...grpc.CallOption) (*AssetIssueList, error) {
	out := new(AssetIssueList)
	err := c.cc.Invoke(ctx, WalletSolidity_GetPaginatedAssetIssueList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetAssetIssueByName(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.AssetIssueContract, error) {
	out := new(core.AssetIssueContract)
	err := c.cc.Invoke(ctx, WalletSolidity_GetAssetIssueByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetAssetIssueListByName(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*AssetIssueList, error) {
	out := new(AssetIssueList)
	err := c.cc.Invoke(ctx, WalletSolidity_GetAssetIssueListByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetAssetIssueById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.AssetIssueContract, error) {
	out := new(core.AssetIssueContract)
	err := c.cc.Invoke(ctx, WalletSolidity_GetAssetIssueById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetNowBlock(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.Block, error) {
	out := new(core.Block)
	err := c.cc.Invoke(ctx, WalletSolidity_GetNowBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetNowBlock2(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*BlockExtention, error) {
	out := new(BlockExtention)
	err := c.cc.Invoke(ctx, WalletSolidity_GetNowBlock2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetBlockByNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*core.Block, error) {
	out := new(core.Block)
	err := c.cc.Invoke(ctx, WalletSolidity_GetBlockByNum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetBlockByNum2(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*BlockExtention, error) {
	out := new(BlockExtention)
	err := c.cc.Invoke(ctx, WalletSolidity_GetBlockByNum2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetTransactionCountByBlockNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*NumberMessage, error) {
	out := new(NumberMessage)
	err := c.cc.Invoke(ctx, WalletSolidity_GetTransactionCountByBlockNum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetDelegatedResource(ctx context.Context, in *DelegatedResourceMessage, opts ...grpc.CallOption) (*DelegatedResourceList, error) {
	out := new(DelegatedResourceList)
	err := c.cc.Invoke(ctx, WalletSolidity_GetDelegatedResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetDelegatedResourceV2(ctx context.Context, in *DelegatedResourceMessage, opts ...grpc.CallOption) (*DelegatedResourceList, error) {
	out := new(DelegatedResourceList)
	err := c.cc.Invoke(ctx, WalletSolidity_GetDelegatedResourceV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetDelegatedResourceAccountIndex(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.DelegatedResourceAccountIndex, error) {
	out := new(core.DelegatedResourceAccountIndex)
	err := c.cc.Invoke(ctx, WalletSolidity_GetDelegatedResourceAccountIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetDelegatedResourceAccountIndexV2(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.DelegatedResourceAccountIndex, error) {
	out := new(core.DelegatedResourceAccountIndex)
	err := c.cc.Invoke(ctx, WalletSolidity_GetDelegatedResourceAccountIndexV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetCanDelegatedMaxSize(ctx context.Context, in *CanDelegatedMaxSizeRequestMessage, opts ...grpc.CallOption) (*CanDelegatedMaxSizeResponseMessage, error) {
	out := new(CanDelegatedMaxSizeResponseMessage)
	err := c.cc.Invoke(ctx, WalletSolidity_GetCanDelegatedMaxSize_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetAvailableUnfreezeCount(ctx context.Context, in *GetAvailableUnfreezeCountRequestMessage, opts ...grpc.CallOption) (*GetAvailableUnfreezeCountResponseMessage, error) {
	out := new(GetAvailableUnfreezeCountResponseMessage)
	err := c.cc.Invoke(ctx, WalletSolidity_GetAvailableUnfreezeCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetCanWithdrawUnfreezeAmount(ctx context.Context, in *CanWithdrawUnfreezeAmountRequestMessage, opts ...grpc.CallOption) (*CanWithdrawUnfreezeAmountResponseMessage, error) {
	out := new(CanWithdrawUnfreezeAmountResponseMessage)
	err := c.cc.Invoke(ctx, WalletSolidity_GetCanWithdrawUnfreezeAmount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetExchangeById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Exchange, error) {
	out := new(core.Exchange)
	err := c.cc.Invoke(ctx, WalletSolidity_GetExchangeById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) ListExchanges(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*ExchangeList, error) {
	out := new(ExchangeList)
	err := c.cc.Invoke(ctx, WalletSolidity_ListExchanges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetTransactionById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, WalletSolidity_GetTransactionById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetTransactionInfoById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.TransactionInfo, error) {
	out := new(core.TransactionInfo)
	err := c.cc.Invoke(ctx, WalletSolidity_GetTransactionInfoById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetMerkleTreeVoucherInfo(ctx context.Context, in *core.OutputPointInfo, opts ...grpc.CallOption) (*core.IncrementalMerkleVoucherInfo, error) {
	out := new(core.IncrementalMerkleVoucherInfo)
	err := c.cc.Invoke(ctx, WalletSolidity_GetMerkleTreeVoucherInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) ScanNoteByIvk(ctx context.Context, in *IvkDecryptParameters, opts ...grpc.CallOption) (*DecryptNotes, error) {
	out := new(DecryptNotes)
	err := c.cc.Invoke(ctx, WalletSolidity_ScanNoteByIvk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) ScanAndMarkNoteByIvk(ctx context.Context, in *IvkDecryptAndMarkParameters, opts ...grpc.CallOption) (*DecryptNotesMarked, error) {
	out := new(DecryptNotesMarked)
	err := c.cc.Invoke(ctx, WalletSolidity_ScanAndMarkNoteByIvk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) ScanNoteByOvk(ctx context.Context, in *OvkDecryptParameters, opts ...grpc.CallOption) (*DecryptNotes, error) {
	out := new(DecryptNotes)
	err := c.cc.Invoke(ctx, WalletSolidity_ScanNoteByOvk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) IsSpend(ctx context.Context, in *NoteParameters, opts ...grpc.CallOption) (*SpendResult, error) {
	out := new(SpendResult)
	err := c.cc.Invoke(ctx, WalletSolidity_IsSpend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) ScanShieldedTRC20NotesByIvk(ctx context.Context, in *IvkDecryptTRC20Parameters, opts ...grpc.CallOption) (*DecryptNotesTRC20, error) {
	out := new(DecryptNotesTRC20)
	err := c.cc.Invoke(ctx, WalletSolidity_ScanShieldedTRC20NotesByIvk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) ScanShieldedTRC20NotesByOvk(ctx context.Context, in *OvkDecryptTRC20Parameters, opts ...grpc.CallOption) (*DecryptNotesTRC20, error) {
	out := new(DecryptNotesTRC20)
	err := c.cc.Invoke(ctx, WalletSolidity_ScanShieldedTRC20NotesByOvk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) IsShieldedTRC20ContractNoteSpent(ctx context.Context, in *NfTRC20Parameters, opts ...grpc.CallOption) (*NullifierResult, error) {
	out := new(NullifierResult)
	err := c.cc.Invoke(ctx, WalletSolidity_IsShieldedTRC20ContractNoteSpent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetRewardInfo(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*NumberMessage, error) {
	out := new(NumberMessage)
	err := c.cc.Invoke(ctx, WalletSolidity_GetRewardInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetBrokerageInfo(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*NumberMessage, error) {
	out := new(NumberMessage)
	err := c.cc.Invoke(ctx, WalletSolidity_GetBrokerageInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) TriggerConstantContract(ctx context.Context, in *core.TriggerSmartContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, WalletSolidity_TriggerConstantContract_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) EstimateEnergy(ctx context.Context, in *core.TriggerSmartContract, opts ...grpc.CallOption) (*EstimateEnergyMessage, error) {
	out := new(EstimateEnergyMessage)
	err := c.cc.Invoke(ctx, WalletSolidity_EstimateEnergy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetTransactionInfoByBlockNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*TransactionInfoList, error) {
	out := new(TransactionInfoList)
	err := c.cc.Invoke(ctx, WalletSolidity_GetTransactionInfoByBlockNum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetMarketOrderById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.MarketOrder, error) {
	out := new(core.MarketOrder)
	err := c.cc.Invoke(ctx, WalletSolidity_GetMarketOrderById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetMarketOrderByAccount(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.MarketOrderList, error) {
	out := new(core.MarketOrderList)
	err := c.cc.Invoke(ctx, WalletSolidity_GetMarketOrderByAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetMarketPriceByPair(ctx context.Context, in *core.MarketOrderPair, opts ...grpc.CallOption) (*core.MarketPriceList, error) {
	out := new(core.MarketPriceList)
	err := c.cc.Invoke(ctx, WalletSolidity_GetMarketPriceByPair_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetMarketOrderListByPair(ctx context.Context, in *core.MarketOrderPair, opts ...grpc.CallOption) (*core.MarketOrderList, error) {
	out := new(core.MarketOrderList)
	err := c.cc.Invoke(ctx, WalletSolidity_GetMarketOrderListByPair_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetMarketPairList(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.MarketOrderPairList, error) {
	out := new(core.MarketOrderPairList)
	err := c.cc.Invoke(ctx, WalletSolidity_GetMarketPairList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetBurnTrx(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NumberMessage, error) {
	out := new(NumberMessage)
	err := c.cc.Invoke(ctx, WalletSolidity_GetBurnTrx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetBlock(ctx context.Context, in *BlockReq, opts ...grpc.CallOption) (*BlockExtention, error) {
	out := new(BlockExtention)
	err := c.cc.Invoke(ctx, WalletSolidity_GetBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetBandwidthPrices(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*PricesResponseMessage, error) {
	out := new(PricesResponseMessage)
	err := c.cc.Invoke(ctx, WalletSolidity_GetBandwidthPrices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetEnergyPrices(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*PricesResponseMessage, error) {
	out := new(PricesResponseMessage)
	err := c.cc.Invoke(ctx, WalletSolidity_GetEnergyPrices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletSolidityServer is the server API for WalletSolidity service.
// All implementations must embed UnimplementedWalletSolidityServer
// for forward compatibility
type WalletSolidityServer interface {
	GetAccount(context.Context, *core.Account) (*core.Account, error)
	GetAccountById(context.Context, *core.Account) (*core.Account, error)
	ListWitnesses(context.Context, *EmptyMessage) (*WitnessList, error)
	GetAssetIssueList(context.Context, *EmptyMessage) (*AssetIssueList, error)
	GetPaginatedAssetIssueList(context.Context, *PaginatedMessage) (*AssetIssueList, error)
	GetAssetIssueByName(context.Context, *BytesMessage) (*core.AssetIssueContract, error)
	GetAssetIssueListByName(context.Context, *BytesMessage) (*AssetIssueList, error)
	GetAssetIssueById(context.Context, *BytesMessage) (*core.AssetIssueContract, error)
	// Please use GetNowBlock2 instead of this function.
	GetNowBlock(context.Context, *EmptyMessage) (*core.Block, error)
	// Use this function instead of GetNowBlock.
	GetNowBlock2(context.Context, *EmptyMessage) (*BlockExtention, error)
	// Please use GetBlockByNum2 instead of this function.
	GetBlockByNum(context.Context, *NumberMessage) (*core.Block, error)
	// Use this function instead of GetBlockByNum.
	GetBlockByNum2(context.Context, *NumberMessage) (*BlockExtention, error)
	GetTransactionCountByBlockNum(context.Context, *NumberMessage) (*NumberMessage, error)
	GetDelegatedResource(context.Context, *DelegatedResourceMessage) (*DelegatedResourceList, error)
	GetDelegatedResourceV2(context.Context, *DelegatedResourceMessage) (*DelegatedResourceList, error)
	GetDelegatedResourceAccountIndex(context.Context, *BytesMessage) (*core.DelegatedResourceAccountIndex, error)
	GetDelegatedResourceAccountIndexV2(context.Context, *BytesMessage) (*core.DelegatedResourceAccountIndex, error)
	GetCanDelegatedMaxSize(context.Context, *CanDelegatedMaxSizeRequestMessage) (*CanDelegatedMaxSizeResponseMessage, error)
	GetAvailableUnfreezeCount(context.Context, *GetAvailableUnfreezeCountRequestMessage) (*GetAvailableUnfreezeCountResponseMessage, error)
	GetCanWithdrawUnfreezeAmount(context.Context, *CanWithdrawUnfreezeAmountRequestMessage) (*CanWithdrawUnfreezeAmountResponseMessage, error)
	GetExchangeById(context.Context, *BytesMessage) (*core.Exchange, error)
	ListExchanges(context.Context, *EmptyMessage) (*ExchangeList, error)
	GetTransactionById(context.Context, *BytesMessage) (*core.Transaction, error)
	GetTransactionInfoById(context.Context, *BytesMessage) (*core.TransactionInfo, error)
	GetMerkleTreeVoucherInfo(context.Context, *core.OutputPointInfo) (*core.IncrementalMerkleVoucherInfo, error)
	ScanNoteByIvk(context.Context, *IvkDecryptParameters) (*DecryptNotes, error)
	ScanAndMarkNoteByIvk(context.Context, *IvkDecryptAndMarkParameters) (*DecryptNotesMarked, error)
	ScanNoteByOvk(context.Context, *OvkDecryptParameters) (*DecryptNotes, error)
	IsSpend(context.Context, *NoteParameters) (*SpendResult, error)
	ScanShieldedTRC20NotesByIvk(context.Context, *IvkDecryptTRC20Parameters) (*DecryptNotesTRC20, error)
	ScanShieldedTRC20NotesByOvk(context.Context, *OvkDecryptTRC20Parameters) (*DecryptNotesTRC20, error)
	IsShieldedTRC20ContractNoteSpent(context.Context, *NfTRC20Parameters) (*NullifierResult, error)
	GetRewardInfo(context.Context, *BytesMessage) (*NumberMessage, error)
	GetBrokerageInfo(context.Context, *BytesMessage) (*NumberMessage, error)
	TriggerConstantContract(context.Context, *core.TriggerSmartContract) (*TransactionExtention, error)
	EstimateEnergy(context.Context, *core.TriggerSmartContract) (*EstimateEnergyMessage, error)
	GetTransactionInfoByBlockNum(context.Context, *NumberMessage) (*TransactionInfoList, error)
	GetMarketOrderById(context.Context, *BytesMessage) (*core.MarketOrder, error)
	GetMarketOrderByAccount(context.Context, *BytesMessage) (*core.MarketOrderList, error)
	GetMarketPriceByPair(context.Context, *core.MarketOrderPair) (*core.MarketPriceList, error)
	GetMarketOrderListByPair(context.Context, *core.MarketOrderPair) (*core.MarketOrderList, error)
	GetMarketPairList(context.Context, *EmptyMessage) (*core.MarketOrderPairList, error)
	GetBurnTrx(context.Context, *EmptyMessage) (*NumberMessage, error)
	GetBlock(context.Context, *BlockReq) (*BlockExtention, error)
	GetBandwidthPrices(context.Context, *EmptyMessage) (*PricesResponseMessage, error)
	GetEnergyPrices(context.Context, *EmptyMessage) (*PricesResponseMessage, error)
	mustEmbedUnimplementedWalletSolidityServer()
}

// UnimplementedWalletSolidityServer must be embedded to have forward compatible implementations.
type UnimplementedWalletSolidityServer struct {
}

func (UnimplementedWalletSolidityServer) GetAccount(context.Context, *core.Account) (*core.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedWalletSolidityServer) GetAccountById(context.Context, *core.Account) (*core.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountById not implemented")
}
func (UnimplementedWalletSolidityServer) ListWitnesses(context.Context, *EmptyMessage) (*WitnessList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWitnesses not implemented")
}
func (UnimplementedWalletSolidityServer) GetAssetIssueList(context.Context, *EmptyMessage) (*AssetIssueList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetIssueList not implemented")
}
func (UnimplementedWalletSolidityServer) GetPaginatedAssetIssueList(context.Context, *PaginatedMessage) (*AssetIssueList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaginatedAssetIssueList not implemented")
}
func (UnimplementedWalletSolidityServer) GetAssetIssueByName(context.Context, *BytesMessage) (*core.AssetIssueContract, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetIssueByName not implemented")
}
func (UnimplementedWalletSolidityServer) GetAssetIssueListByName(context.Context, *BytesMessage) (*AssetIssueList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetIssueListByName not implemented")
}
func (UnimplementedWalletSolidityServer) GetAssetIssueById(context.Context, *BytesMessage) (*core.AssetIssueContract, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetIssueById not implemented")
}
func (UnimplementedWalletSolidityServer) GetNowBlock(context.Context, *EmptyMessage) (*core.Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNowBlock not implemented")
}
func (UnimplementedWalletSolidityServer) GetNowBlock2(context.Context, *EmptyMessage) (*BlockExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNowBlock2 not implemented")
}
func (UnimplementedWalletSolidityServer) GetBlockByNum(context.Context, *NumberMessage) (*core.Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByNum not implemented")
}
func (UnimplementedWalletSolidityServer) GetBlockByNum2(context.Context, *NumberMessage) (*BlockExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByNum2 not implemented")
}
func (UnimplementedWalletSolidityServer) GetTransactionCountByBlockNum(context.Context, *NumberMessage) (*NumberMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionCountByBlockNum not implemented")
}
func (UnimplementedWalletSolidityServer) GetDelegatedResource(context.Context, *DelegatedResourceMessage) (*DelegatedResourceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegatedResource not implemented")
}
func (UnimplementedWalletSolidityServer) GetDelegatedResourceV2(context.Context, *DelegatedResourceMessage) (*DelegatedResourceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegatedResourceV2 not implemented")
}
func (UnimplementedWalletSolidityServer) GetDelegatedResourceAccountIndex(context.Context, *BytesMessage) (*core.DelegatedResourceAccountIndex, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegatedResourceAccountIndex not implemented")
}
func (UnimplementedWalletSolidityServer) GetDelegatedResourceAccountIndexV2(context.Context, *BytesMessage) (*core.DelegatedResourceAccountIndex, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegatedResourceAccountIndexV2 not implemented")
}
func (UnimplementedWalletSolidityServer) GetCanDelegatedMaxSize(context.Context, *CanDelegatedMaxSizeRequestMessage) (*CanDelegatedMaxSizeResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCanDelegatedMaxSize not implemented")
}
func (UnimplementedWalletSolidityServer) GetAvailableUnfreezeCount(context.Context, *GetAvailableUnfreezeCountRequestMessage) (*GetAvailableUnfreezeCountResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableUnfreezeCount not implemented")
}
func (UnimplementedWalletSolidityServer) GetCanWithdrawUnfreezeAmount(context.Context, *CanWithdrawUnfreezeAmountRequestMessage) (*CanWithdrawUnfreezeAmountResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCanWithdrawUnfreezeAmount not implemented")
}
func (UnimplementedWalletSolidityServer) GetExchangeById(context.Context, *BytesMessage) (*core.Exchange, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExchangeById not implemented")
}
func (UnimplementedWalletSolidityServer) ListExchanges(context.Context, *EmptyMessage) (*ExchangeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExchanges not implemented")
}
func (UnimplementedWalletSolidityServer) GetTransactionById(context.Context, *BytesMessage) (*core.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionById not implemented")
}
func (UnimplementedWalletSolidityServer) GetTransactionInfoById(context.Context, *BytesMessage) (*core.TransactionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionInfoById not implemented")
}
func (UnimplementedWalletSolidityServer) GetMerkleTreeVoucherInfo(context.Context, *core.OutputPointInfo) (*core.IncrementalMerkleVoucherInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerkleTreeVoucherInfo not implemented")
}
func (UnimplementedWalletSolidityServer) ScanNoteByIvk(context.Context, *IvkDecryptParameters) (*DecryptNotes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanNoteByIvk not implemented")
}
func (UnimplementedWalletSolidityServer) ScanAndMarkNoteByIvk(context.Context, *IvkDecryptAndMarkParameters) (*DecryptNotesMarked, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanAndMarkNoteByIvk not implemented")
}
func (UnimplementedWalletSolidityServer) ScanNoteByOvk(context.Context, *OvkDecryptParameters) (*DecryptNotes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanNoteByOvk not implemented")
}
func (UnimplementedWalletSolidityServer) IsSpend(context.Context, *NoteParameters) (*SpendResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSpend not implemented")
}
func (UnimplementedWalletSolidityServer) ScanShieldedTRC20NotesByIvk(context.Context, *IvkDecryptTRC20Parameters) (*DecryptNotesTRC20, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanShieldedTRC20NotesByIvk not implemented")
}
func (UnimplementedWalletSolidityServer) ScanShieldedTRC20NotesByOvk(context.Context, *OvkDecryptTRC20Parameters) (*DecryptNotesTRC20, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanShieldedTRC20NotesByOvk not implemented")
}
func (UnimplementedWalletSolidityServer) IsShieldedTRC20ContractNoteSpent(context.Context, *NfTRC20Parameters) (*NullifierResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsShieldedTRC20ContractNoteSpent not implemented")
}
func (UnimplementedWalletSolidityServer) GetRewardInfo(context.Context, *BytesMessage) (*NumberMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRewardInfo not implemented")
}
func (UnimplementedWalletSolidityServer) GetBrokerageInfo(context.Context, *BytesMessage) (*NumberMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrokerageInfo not implemented")
}
func (UnimplementedWalletSolidityServer) TriggerConstantContract(context.Context, *core.TriggerSmartContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerConstantContract not implemented")
}
func (UnimplementedWalletSolidityServer) EstimateEnergy(context.Context, *core.TriggerSmartContract) (*EstimateEnergyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateEnergy not implemented")
}
func (UnimplementedWalletSolidityServer) GetTransactionInfoByBlockNum(context.Context, *NumberMessage) (*TransactionInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionInfoByBlockNum not implemented")
}
func (UnimplementedWalletSolidityServer) GetMarketOrderById(context.Context, *BytesMessage) (*core.MarketOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketOrderById not implemented")
}
func (UnimplementedWalletSolidityServer) GetMarketOrderByAccount(context.Context, *BytesMessage) (*core.MarketOrderList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketOrderByAccount not implemented")
}
func (UnimplementedWalletSolidityServer) GetMarketPriceByPair(context.Context, *core.MarketOrderPair) (*core.MarketPriceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketPriceByPair not implemented")
}
func (UnimplementedWalletSolidityServer) GetMarketOrderListByPair(context.Context, *core.MarketOrderPair) (*core.MarketOrderList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketOrderListByPair not implemented")
}
func (UnimplementedWalletSolidityServer) GetMarketPairList(context.Context, *EmptyMessage) (*core.MarketOrderPairList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketPairList not implemented")
}
func (UnimplementedWalletSolidityServer) GetBurnTrx(context.Context, *EmptyMessage) (*NumberMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBurnTrx not implemented")
}
func (UnimplementedWalletSolidityServer) GetBlock(context.Context, *BlockReq) (*BlockExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (UnimplementedWalletSolidityServer) GetBandwidthPrices(context.Context, *EmptyMessage) (*PricesResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBandwidthPrices not implemented")
}
func (UnimplementedWalletSolidityServer) GetEnergyPrices(context.Context, *EmptyMessage) (*PricesResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnergyPrices not implemented")
}
func (UnimplementedWalletSolidityServer) mustEmbedUnimplementedWalletSolidityServer() {}

// UnsafeWalletSolidityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletSolidityServer will
// result in compilation errors.
type UnsafeWalletSolidityServer interface {
	mustEmbedUnimplementedWalletSolidityServer()
}

func RegisterWalletSolidityServer(s grpc.ServiceRegistrar, srv WalletSolidityServer) {
	s.RegisterService(&WalletSolidity_ServiceDesc, srv)
}

func _WalletSolidity_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetAccount(ctx, req.(*core.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetAccountById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetAccountById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_GetAccountById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetAccountById(ctx, req.(*core.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_ListWitnesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).ListWitnesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_ListWitnesses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).ListWitnesses(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetAssetIssueList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetAssetIssueList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_GetAssetIssueList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetAssetIssueList(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetPaginatedAssetIssueList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetPaginatedAssetIssueList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_GetPaginatedAssetIssueList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetPaginatedAssetIssueList(ctx, req.(*PaginatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetAssetIssueByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetAssetIssueByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_GetAssetIssueByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetAssetIssueByName(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetAssetIssueListByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetAssetIssueListByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_GetAssetIssueListByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetAssetIssueListByName(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetAssetIssueById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetAssetIssueById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_GetAssetIssueById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetAssetIssueById(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetNowBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetNowBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_GetNowBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetNowBlock(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetNowBlock2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetNowBlock2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_GetNowBlock2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetNowBlock2(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetBlockByNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetBlockByNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_GetBlockByNum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetBlockByNum(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetBlockByNum2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetBlockByNum2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_GetBlockByNum2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetBlockByNum2(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetTransactionCountByBlockNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetTransactionCountByBlockNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_GetTransactionCountByBlockNum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetTransactionCountByBlockNum(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetDelegatedResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelegatedResourceMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetDelegatedResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_GetDelegatedResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetDelegatedResource(ctx, req.(*DelegatedResourceMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetDelegatedResourceV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelegatedResourceMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetDelegatedResourceV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_GetDelegatedResourceV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetDelegatedResourceV2(ctx, req.(*DelegatedResourceMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetDelegatedResourceAccountIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetDelegatedResourceAccountIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_GetDelegatedResourceAccountIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetDelegatedResourceAccountIndex(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetDelegatedResourceAccountIndexV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetDelegatedResourceAccountIndexV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_GetDelegatedResourceAccountIndexV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetDelegatedResourceAccountIndexV2(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetCanDelegatedMaxSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanDelegatedMaxSizeRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetCanDelegatedMaxSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_GetCanDelegatedMaxSize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetCanDelegatedMaxSize(ctx, req.(*CanDelegatedMaxSizeRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetAvailableUnfreezeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableUnfreezeCountRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetAvailableUnfreezeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_GetAvailableUnfreezeCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetAvailableUnfreezeCount(ctx, req.(*GetAvailableUnfreezeCountRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetCanWithdrawUnfreezeAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanWithdrawUnfreezeAmountRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetCanWithdrawUnfreezeAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_GetCanWithdrawUnfreezeAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetCanWithdrawUnfreezeAmount(ctx, req.(*CanWithdrawUnfreezeAmountRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetExchangeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetExchangeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_GetExchangeById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetExchangeById(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_ListExchanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).ListExchanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_ListExchanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).ListExchanges(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetTransactionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetTransactionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_GetTransactionById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetTransactionById(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetTransactionInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetTransactionInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_GetTransactionInfoById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetTransactionInfoById(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetMerkleTreeVoucherInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.OutputPointInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetMerkleTreeVoucherInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_GetMerkleTreeVoucherInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetMerkleTreeVoucherInfo(ctx, req.(*core.OutputPointInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_ScanNoteByIvk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IvkDecryptParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).ScanNoteByIvk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_ScanNoteByIvk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).ScanNoteByIvk(ctx, req.(*IvkDecryptParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_ScanAndMarkNoteByIvk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IvkDecryptAndMarkParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).ScanAndMarkNoteByIvk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_ScanAndMarkNoteByIvk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).ScanAndMarkNoteByIvk(ctx, req.(*IvkDecryptAndMarkParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_ScanNoteByOvk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OvkDecryptParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).ScanNoteByOvk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_ScanNoteByOvk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).ScanNoteByOvk(ctx, req.(*OvkDecryptParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_IsSpend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoteParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).IsSpend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_IsSpend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).IsSpend(ctx, req.(*NoteParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_ScanShieldedTRC20NotesByIvk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IvkDecryptTRC20Parameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).ScanShieldedTRC20NotesByIvk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_ScanShieldedTRC20NotesByIvk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).ScanShieldedTRC20NotesByIvk(ctx, req.(*IvkDecryptTRC20Parameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_ScanShieldedTRC20NotesByOvk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OvkDecryptTRC20Parameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).ScanShieldedTRC20NotesByOvk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_ScanShieldedTRC20NotesByOvk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).ScanShieldedTRC20NotesByOvk(ctx, req.(*OvkDecryptTRC20Parameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_IsShieldedTRC20ContractNoteSpent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NfTRC20Parameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).IsShieldedTRC20ContractNoteSpent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_IsShieldedTRC20ContractNoteSpent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).IsShieldedTRC20ContractNoteSpent(ctx, req.(*NfTRC20Parameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetRewardInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetRewardInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_GetRewardInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetRewardInfo(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetBrokerageInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetBrokerageInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_GetBrokerageInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetBrokerageInfo(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_TriggerConstantContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.TriggerSmartContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).TriggerConstantContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_TriggerConstantContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).TriggerConstantContract(ctx, req.(*core.TriggerSmartContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_EstimateEnergy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.TriggerSmartContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).EstimateEnergy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_EstimateEnergy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).EstimateEnergy(ctx, req.(*core.TriggerSmartContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetTransactionInfoByBlockNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetTransactionInfoByBlockNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_GetTransactionInfoByBlockNum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetTransactionInfoByBlockNum(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetMarketOrderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetMarketOrderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_GetMarketOrderById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetMarketOrderById(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetMarketOrderByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetMarketOrderByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_GetMarketOrderByAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetMarketOrderByAccount(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetMarketPriceByPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.MarketOrderPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetMarketPriceByPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_GetMarketPriceByPair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetMarketPriceByPair(ctx, req.(*core.MarketOrderPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetMarketOrderListByPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.MarketOrderPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetMarketOrderListByPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_GetMarketOrderListByPair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetMarketOrderListByPair(ctx, req.(*core.MarketOrderPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetMarketPairList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetMarketPairList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_GetMarketPairList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetMarketPairList(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetBurnTrx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetBurnTrx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_GetBurnTrx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetBurnTrx(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_GetBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetBlock(ctx, req.(*BlockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetBandwidthPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetBandwidthPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_GetBandwidthPrices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetBandwidthPrices(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetEnergyPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetEnergyPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSolidity_GetEnergyPrices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetEnergyPrices(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletSolidity_ServiceDesc is the grpc.ServiceDesc for WalletSolidity service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletSolidity_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.WalletSolidity",
	HandlerType: (*WalletSolidityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccount",
			Handler:    _WalletSolidity_GetAccount_Handler,
		},
		{
			MethodName: "GetAccountById",
			Handler:    _WalletSolidity_GetAccountById_Handler,
		},
		{
			MethodName: "ListWitnesses",
			Handler:    _WalletSolidity_ListWitnesses_Handler,
		},
		{
			MethodName: "GetAssetIssueList",
			Handler:    _WalletSolidity_GetAssetIssueList_Handler,
		},
		{
			MethodName: "GetPaginatedAssetIssueList",
			Handler:    _WalletSolidity_GetPaginatedAssetIssueList_Handler,
		},
		{
			MethodName: "GetAssetIssueByName",
			Handler:    _WalletSolidity_GetAssetIssueByName_Handler,
		},
		{
			MethodName: "GetAssetIssueListByName",
			Handler:    _WalletSolidity_GetAssetIssueListByName_Handler,
		},
		{
			MethodName: "GetAssetIssueById",
			Handler:    _WalletSolidity_GetAssetIssueById_Handler,
		},
		{
			MethodName: "GetNowBlock",
			Handler:    _WalletSolidity_GetNowBlock_Handler,
		},
		{
			MethodName: "GetNowBlock2",
			Handler:    _WalletSolidity_GetNowBlock2_Handler,
		},
		{
			MethodName: "GetBlockByNum",
			Handler:    _WalletSolidity_GetBlockByNum_Handler,
		},
		{
			MethodName: "GetBlockByNum2",
			Handler:    _WalletSolidity_GetBlockByNum2_Handler,
		},
		{
			MethodName: "GetTransactionCountByBlockNum",
			Handler:    _WalletSolidity_GetTransactionCountByBlockNum_Handler,
		},
		{
			MethodName: "GetDelegatedResource",
			Handler:    _WalletSolidity_GetDelegatedResource_Handler,
		},
		{
			MethodName: "GetDelegatedResourceV2",
			Handler:    _WalletSolidity_GetDelegatedResourceV2_Handler,
		},
		{
			MethodName: "GetDelegatedResourceAccountIndex",
			Handler:    _WalletSolidity_GetDelegatedResourceAccountIndex_Handler,
		},
		{
			MethodName: "GetDelegatedResourceAccountIndexV2",
			Handler:    _WalletSolidity_GetDelegatedResourceAccountIndexV2_Handler,
		},
		{
			MethodName: "GetCanDelegatedMaxSize",
			Handler:    _WalletSolidity_GetCanDelegatedMaxSize_Handler,
		},
		{
			MethodName: "GetAvailableUnfreezeCount",
			Handler:    _WalletSolidity_GetAvailableUnfreezeCount_Handler,
		},
		{
			MethodName: "GetCanWithdrawUnfreezeAmount",
			Handler:    _WalletSolidity_GetCanWithdrawUnfreezeAmount_Handler,
		},
		{
			MethodName: "GetExchangeById",
			Handler:    _WalletSolidity_GetExchangeById_Handler,
		},
		{
			MethodName: "ListExchanges",
			Handler:    _WalletSolidity_ListExchanges_Handler,
		},
		{
			MethodName: "GetTransactionById",
			Handler:    _WalletSolidity_GetTransactionById_Handler,
		},
		{
			MethodName: "GetTransactionInfoById",
			Handler:    _WalletSolidity_GetTransactionInfoById_Handler,
		},
		{
			MethodName: "GetMerkleTreeVoucherInfo",
			Handler:    _WalletSolidity_GetMerkleTreeVoucherInfo_Handler,
		},
		{
			MethodName: "ScanNoteByIvk",
			Handler:    _WalletSolidity_ScanNoteByIvk_Handler,
		},
		{
			MethodName: "ScanAndMarkNoteByIvk",
			Handler:    _WalletSolidity_ScanAndMarkNoteByIvk_Handler,
		},
		{
			MethodName: "ScanNoteByOvk",
			Handler:    _WalletSolidity_ScanNoteByOvk_Handler,
		},
		{
			MethodName: "IsSpend",
			Handler:    _WalletSolidity_IsSpend_Handler,
		},
		{
			MethodName: "ScanShieldedTRC20NotesByIvk",
			Handler:    _WalletSolidity_ScanShieldedTRC20NotesByIvk_Handler,
		},
		{
			MethodName: "ScanShieldedTRC20NotesByOvk",
			Handler:    _WalletSolidity_ScanShieldedTRC20NotesByOvk_Handler,
		},
		{
			MethodName: "IsShieldedTRC20ContractNoteSpent",
			Handler:    _WalletSolidity_IsShieldedTRC20ContractNoteSpent_Handler,
		},
		{
			MethodName: "GetRewardInfo",
			Handler:    _WalletSolidity_GetRewardInfo_Handler,
		},
		{
			MethodName: "GetBrokerageInfo",
			Handler:    _WalletSolidity_GetBrokerageInfo_Handler,
		},
		{
			MethodName: "TriggerConstantContract",
			Handler:    _WalletSolidity_TriggerConstantContract_Handler,
		},
		{
			MethodName: "EstimateEnergy",
			Handler:    _WalletSolidity_EstimateEnergy_Handler,
		},
		{
			MethodName: "GetTransactionInfoByBlockNum",
			Handler:    _WalletSolidity_GetTransactionInfoByBlockNum_Handler,
		},
		{
			MethodName: "GetMarketOrderById",
			Handler:    _WalletSolidity_GetMarketOrderById_Handler,
		},
		{
			MethodName: "GetMarketOrderByAccount",
			Handler:    _WalletSolidity_GetMarketOrderByAccount_Handler,
		},
		{
			MethodName: "GetMarketPriceByPair",
			Handler:    _WalletSolidity_GetMarketPriceByPair_Handler,
		},
		{
			MethodName: "GetMarketOrderListByPair",
			Handler:    _WalletSolidity_GetMarketOrderListByPair_Handler,
		},
		{
			MethodName: "GetMarketPairList",
			Handler:    _WalletSolidity_GetMarketPairList_Handler,
		},
		{
			MethodName: "GetBurnTrx",
			Handler:    _WalletSolidity_GetBurnTrx_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _WalletSolidity_GetBlock_Handler,
		},
		{
			MethodName: "GetBandwidthPrices",
			Handler:    _WalletSolidity_GetBandwidthPrices_Handler,
		},
		{
			MethodName: "GetEnergyPrices",
			Handler:    _WalletSolidity_GetEnergyPrices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

const (
	WalletExtension_GetTransactionsFromThis_FullMethodName  = "/protocol.WalletExtension/GetTransactionsFromThis"
	WalletExtension_GetTransactionsFromThis2_FullMethodName = "/protocol.WalletExtension/GetTransactionsFromThis2"
	WalletExtension_GetTransactionsToThis_FullMethodName    = "/protocol.WalletExtension/GetTransactionsToThis"
	WalletExtension_GetTransactionsToThis2_FullMethodName   = "/protocol.WalletExtension/GetTransactionsToThis2"
)

// WalletExtensionClient is the client API for WalletExtension service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletExtensionClient interface {
	// Please use GetTransactionsFromThis2 instead of this function.
	GetTransactionsFromThis(ctx context.Context, in *AccountPaginated, opts ...grpc.CallOption) (*TransactionList, error)
	// Use this function instead of GetTransactionsFromThis.
	GetTransactionsFromThis2(ctx context.Context, in *AccountPaginated, opts ...grpc.CallOption) (*TransactionListExtention, error)
	// Please use GetTransactionsToThis2 instead of this function.
	GetTransactionsToThis(ctx context.Context, in *AccountPaginated, opts ...grpc.CallOption) (*TransactionList, error)
	// Use this function instead of GetTransactionsToThis.
	GetTransactionsToThis2(ctx context.Context, in *AccountPaginated, opts ...grpc.CallOption) (*TransactionListExtention, error)
}

type walletExtensionClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletExtensionClient(cc grpc.ClientConnInterface) WalletExtensionClient {
	return &walletExtensionClient{cc}
}

func (c *walletExtensionClient) GetTransactionsFromThis(ctx context.Context, in *AccountPaginated, opts ...grpc.CallOption) (*TransactionList, error) {
	out := new(TransactionList)
	err := c.cc.Invoke(ctx, WalletExtension_GetTransactionsFromThis_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletExtensionClient) GetTransactionsFromThis2(ctx context.Context, in *AccountPaginated, opts ...grpc.CallOption) (*TransactionListExtention, error) {
	out := new(TransactionListExtention)
	err := c.cc.Invoke(ctx, WalletExtension_GetTransactionsFromThis2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletExtensionClient) GetTransactionsToThis(ctx context.Context, in *AccountPaginated, opts ...grpc.CallOption) (*TransactionList, error) {
	out := new(TransactionList)
	err := c.cc.Invoke(ctx, WalletExtension_GetTransactionsToThis_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletExtensionClient) GetTransactionsToThis2(ctx context.Context, in *AccountPaginated, opts ...grpc.CallOption) (*TransactionListExtention, error) {
	out := new(TransactionListExtention)
	err := c.cc.Invoke(ctx, WalletExtension_GetTransactionsToThis2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletExtensionServer is the server API for WalletExtension service.
// All implementations must embed UnimplementedWalletExtensionServer
// for forward compatibility
type WalletExtensionServer interface {
	// Please use GetTransactionsFromThis2 instead of this function.
	GetTransactionsFromThis(context.Context, *AccountPaginated) (*TransactionList, error)
	// Use this function instead of GetTransactionsFromThis.
	GetTransactionsFromThis2(context.Context, *AccountPaginated) (*TransactionListExtention, error)
	// Please use GetTransactionsToThis2 instead of this function.
	GetTransactionsToThis(context.Context, *AccountPaginated) (*TransactionList, error)
	// Use this function instead of GetTransactionsToThis.
	GetTransactionsToThis2(context.Context, *AccountPaginated) (*TransactionListExtention, error)
	mustEmbedUnimplementedWalletExtensionServer()
}

// UnimplementedWalletExtensionServer must be embedded to have forward compatible implementations.
type UnimplementedWalletExtensionServer struct {
}

func (UnimplementedWalletExtensionServer) GetTransactionsFromThis(context.Context, *AccountPaginated) (*TransactionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsFromThis not implemented")
}
func (UnimplementedWalletExtensionServer) GetTransactionsFromThis2(context.Context, *AccountPaginated) (*TransactionListExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsFromThis2 not implemented")
}
func (UnimplementedWalletExtensionServer) GetTransactionsToThis(context.Context, *AccountPaginated) (*TransactionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsToThis not implemented")
}
func (UnimplementedWalletExtensionServer) GetTransactionsToThis2(context.Context, *AccountPaginated) (*TransactionListExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsToThis2 not implemented")
}
func (UnimplementedWalletExtensionServer) mustEmbedUnimplementedWalletExtensionServer() {}

// UnsafeWalletExtensionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletExtensionServer will
// result in compilation errors.
type UnsafeWalletExtensionServer interface {
	mustEmbedUnimplementedWalletExtensionServer()
}

func RegisterWalletExtensionServer(s grpc.ServiceRegistrar, srv WalletExtensionServer) {
	s.RegisterService(&WalletExtension_ServiceDesc, srv)
}

func _WalletExtension_GetTransactionsFromThis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountPaginated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletExtensionServer).GetTransactionsFromThis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletExtension_GetTransactionsFromThis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletExtensionServer).GetTransactionsFromThis(ctx, req.(*AccountPaginated))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletExtension_GetTransactionsFromThis2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountPaginated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletExtensionServer).GetTransactionsFromThis2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletExtension_GetTransactionsFromThis2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletExtensionServer).GetTransactionsFromThis2(ctx, req.(*AccountPaginated))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletExtension_GetTransactionsToThis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountPaginated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletExtensionServer).GetTransactionsToThis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletExtension_GetTransactionsToThis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletExtensionServer).GetTransactionsToThis(ctx, req.(*AccountPaginated))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletExtension_GetTransactionsToThis2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountPaginated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletExtensionServer).GetTransactionsToThis2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletExtension_GetTransactionsToThis2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletExtensionServer).GetTransactionsToThis2(ctx, req.(*AccountPaginated))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletExtension_ServiceDesc is the grpc.ServiceDesc for WalletExtension service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletExtension_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.WalletExtension",
	HandlerType: (*WalletExtensionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTransactionsFromThis",
			Handler:    _WalletExtension_GetTransactionsFromThis_Handler,
		},
		{
			MethodName: "GetTransactionsFromThis2",
			Handler:    _WalletExtension_GetTransactionsFromThis2_Handler,
		},
		{
			MethodName: "GetTransactionsToThis",
			Handler:    _WalletExtension_GetTransactionsToThis_Handler,
		},
		{
			MethodName: "GetTransactionsToThis2",
			Handler:    _WalletExtension_GetTransactionsToThis2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

const (
	Database_GetBlockReference_FullMethodName    = "/protocol.Database/getBlockReference"
	Database_GetDynamicProperties_FullMethodName = "/protocol.Database/GetDynamicProperties"
	Database_GetNowBlock_FullMethodName          = "/protocol.Database/GetNowBlock"
	Database_GetBlockByNum_FullMethodName        = "/protocol.Database/GetBlockByNum"
)

// DatabaseClient is the client API for Database service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabaseClient interface {
	// for tapos
	GetBlockReference(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*BlockReference, error)
	GetDynamicProperties(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.DynamicProperties, error)
	GetNowBlock(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.Block, error)
	GetBlockByNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*core.Block, error)
}

type databaseClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseClient(cc grpc.ClientConnInterface) DatabaseClient {
	return &databaseClient{cc}
}

func (c *databaseClient) GetBlockReference(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*BlockReference, error) {
	out := new(BlockReference)
	err := c.cc.Invoke(ctx, Database_GetBlockReference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) GetDynamicProperties(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.DynamicProperties, error) {
	out := new(core.DynamicProperties)
	err := c.cc.Invoke(ctx, Database_GetDynamicProperties_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) GetNowBlock(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.Block, error) {
	out := new(core.Block)
	err := c.cc.Invoke(ctx, Database_GetNowBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) GetBlockByNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*core.Block, error) {
	out := new(core.Block)
	err := c.cc.Invoke(ctx, Database_GetBlockByNum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseServer is the server API for Database service.
// All implementations must embed UnimplementedDatabaseServer
// for forward compatibility
type DatabaseServer interface {
	// for tapos
	GetBlockReference(context.Context, *EmptyMessage) (*BlockReference, error)
	GetDynamicProperties(context.Context, *EmptyMessage) (*core.DynamicProperties, error)
	GetNowBlock(context.Context, *EmptyMessage) (*core.Block, error)
	GetBlockByNum(context.Context, *NumberMessage) (*core.Block, error)
	mustEmbedUnimplementedDatabaseServer()
}

// UnimplementedDatabaseServer must be embedded to have forward compatible implementations.
type UnimplementedDatabaseServer struct {
}

func (UnimplementedDatabaseServer) GetBlockReference(context.Context, *EmptyMessage) (*BlockReference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockReference not implemented")
}
func (UnimplementedDatabaseServer) GetDynamicProperties(context.Context, *EmptyMessage) (*core.DynamicProperties, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDynamicProperties not implemented")
}
func (UnimplementedDatabaseServer) GetNowBlock(context.Context, *EmptyMessage) (*core.Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNowBlock not implemented")
}
func (UnimplementedDatabaseServer) GetBlockByNum(context.Context, *NumberMessage) (*core.Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByNum not implemented")
}
func (UnimplementedDatabaseServer) mustEmbedUnimplementedDatabaseServer() {}

// UnsafeDatabaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseServer will
// result in compilation errors.
type UnsafeDatabaseServer interface {
	mustEmbedUnimplementedDatabaseServer()
}

func RegisterDatabaseServer(s grpc.ServiceRegistrar, srv DatabaseServer) {
	s.RegisterService(&Database_ServiceDesc, srv)
}

func _Database_GetBlockReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).GetBlockReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Database_GetBlockReference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).GetBlockReference(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_GetDynamicProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).GetDynamicProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Database_GetDynamicProperties_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).GetDynamicProperties(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_GetNowBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).GetNowBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Database_GetNowBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).GetNowBlock(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_GetBlockByNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).GetBlockByNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Database_GetBlockByNum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).GetBlockByNum(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Database_ServiceDesc is the grpc.ServiceDesc for Database service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Database_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Database",
	HandlerType: (*DatabaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getBlockReference",
			Handler:    _Database_GetBlockReference_Handler,
		},
		{
			MethodName: "GetDynamicProperties",
			Handler:    _Database_GetDynamicProperties_Handler,
		},
		{
			MethodName: "GetNowBlock",
			Handler:    _Database_GetNowBlock_Handler,
		},
		{
			MethodName: "GetBlockByNum",
			Handler:    _Database_GetBlockByNum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

const (
	Monitor_GetStatsInfo_FullMethodName = "/protocol.Monitor/GetStatsInfo"
)

// MonitorClient is the client API for Monitor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonitorClient interface {
	GetStatsInfo(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.MetricsInfo, error)
}

type monitorClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitorClient(cc grpc.ClientConnInterface) MonitorClient {
	return &monitorClient{cc}
}

func (c *monitorClient) GetStatsInfo(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.MetricsInfo, error) {
	out := new(core.MetricsInfo)
	err := c.cc.Invoke(ctx, Monitor_GetStatsInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonitorServer is the server API for Monitor service.
// All implementations must embed UnimplementedMonitorServer
// for forward compatibility
type MonitorServer interface {
	GetStatsInfo(context.Context, *EmptyMessage) (*core.MetricsInfo, error)
	mustEmbedUnimplementedMonitorServer()
}

// UnimplementedMonitorServer must be embedded to have forward compatible implementations.
type UnimplementedMonitorServer struct {
}

func (UnimplementedMonitorServer) GetStatsInfo(context.Context, *EmptyMessage) (*core.MetricsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatsInfo not implemented")
}
func (UnimplementedMonitorServer) mustEmbedUnimplementedMonitorServer() {}

// UnsafeMonitorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonitorServer will
// result in compilation errors.
type UnsafeMonitorServer interface {
	mustEmbedUnimplementedMonitorServer()
}

func RegisterMonitorServer(s grpc.ServiceRegistrar, srv MonitorServer) {
	s.RegisterService(&Monitor_ServiceDesc, srv)
}

func _Monitor_GetStatsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorServer).GetStatsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Monitor_GetStatsInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorServer).GetStatsInfo(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Monitor_ServiceDesc is the grpc.ServiceDesc for Monitor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Monitor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Monitor",
	HandlerType: (*MonitorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatsInfo",
			Handler:    _Monitor_GetStatsInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

const ()

// NetworkClient is the client API for Network service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkClient interface {
}

type networkClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkClient(cc grpc.ClientConnInterface) NetworkClient {
	return &networkClient{cc}
}

// NetworkServer is the server API for Network service.
// All implementations must embed UnimplementedNetworkServer
// for forward compatibility
type NetworkServer interface {
	mustEmbedUnimplementedNetworkServer()
}

// UnimplementedNetworkServer must be embedded to have forward compatible implementations.
type UnimplementedNetworkServer struct {
}

func (UnimplementedNetworkServer) mustEmbedUnimplementedNetworkServer() {}

// UnsafeNetworkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkServer will
// result in compilation errors.
type UnsafeNetworkServer interface {
	mustEmbedUnimplementedNetworkServer()
}

func RegisterNetworkServer(s grpc.ServiceRegistrar, srv NetworkServer) {
	s.RegisterService(&Network_ServiceDesc, srv)
}

// Network_ServiceDesc is the grpc.ServiceDesc for Network service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Network_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Network",
	HandlerType: (*NetworkServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "api/api.proto",
}
